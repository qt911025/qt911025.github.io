import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as r,c as k,a as n,d as e,w as a,b as s,e as o}from"./app-vGhL8v2_.js";const m={},d=n("p",null,"比较函数使用小于号会使等于的情况下，把本来的先后关系对调。待插入对象是在已插入数组右边的，一直在向左移动。 所以遇“等”就停合情合理。",-1),v=n("p",null,"但当用同样的测试测下面这个堆排序，就出了问题。",-1),b=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"BiheapSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Sorter"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"BiheapSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token function"},"build_max_heap"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),s("vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"rev"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"unsafe"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"swap_nonoverlapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token function"},"max_heapify"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 构建最大堆，这个只会执行一次"),s(`
`),n("span",{class:"token comment"},"// 构建后，父节点都会大于左右节点，而左右节点之间的大小未定"),s(`
`),n("span",{class:"token comment"},"// i向下取整，因为i不是一个右开区间的右界，而是指向具体下标的“指针”"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"build_max_heap"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},".."),s("vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"rev"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"max_heapify"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},","),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"max_heapify"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s(`
    arr`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    compare`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},","),s(`
    i`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(`
    heap_size`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" l "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 转换成1开头下标，乘以2后再转换成0开头下标"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" r "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 就在右边"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" largest "),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" l "),n("span",{class:"token operator"},"<"),s(" heap_size "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("arr"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("arr"),n("span",{class:"token punctuation"},"["),s("largest"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        largest `),n("span",{class:"token operator"},"="),s(" l"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" r "),n("span",{class:"token operator"},"<"),s(" heap_size "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("arr"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("arr"),n("span",{class:"token punctuation"},"["),s("largest"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        largest `),n("span",{class:"token operator"},"="),s(" r"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" largest "),n("span",{class:"token operator"},"!="),s(" i "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"unsafe"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"swap_nonoverlapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" arr"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" arr"),n("span",{class:"token punctuation"},"["),s("largest"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token function"},"max_heapify"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" largest"),n("span",{class:"token punctuation"},","),s(" heap_size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=o(`<p>当vec里存在两个key相同的元素时，排序与理想的结果不符。两个相同key的元素应当在排序后维持原来的左右关系，然而并没有。</p><p>因为之前的两个排序都是按排序的结果推出一个个升序的结果从左往右排列。 而这次的堆排序，本质上是一次次将子序列[0..vec.len()]、[0..vec.len()-1]、[0..vec.len()-2]、……、[0..1] 的0号元素从右向左排列的过程。</p><p>而每次子序列的max_heapify过程都是一次向左“冒泡”，所以要让本来更靠右的元素在结果上还是靠右，那么就应该让元素在冒泡的时候， 相等条件应该也向左冒泡。 而正好，i、l、r三者的关系原本也是先后比较。试想一个i == l == r的情况。想让结果也符合i、l、r排序， 应该让r先出堆，再到l，再到i。那么至少应该让r先符合比较条件。</p><p>前面几次的测试用例可以换成这个测试<strong>幂等性</strong>的用例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending_idempotence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 幂等性测试，当比较函数包含等于时，结果应当是幂等的</span>
    <span class="token attribute attr-name">#[derive(Debug, PartialEq, Clone)]</span>
    <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> compare <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Foo</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Foo</span><span class="token closure-punctuation punctuation">|</span></span> prev<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> next<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">&quot;LS2&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">BiheapSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> sorted_v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiheapSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// BiheapSorter(&amp;mut v).sort_by(compare);</span>
    <span class="token comment">// BiheapSorter(&amp;mut v).sort_by(compare);</span>

    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> sorted_v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),f=n("p",null,[s("幂等性即"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"f(x) = f(f(x))")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},"))")])])]),s("。如果把x当作是序列，f是排序函数，那么幂等性的排序就是排序一个已按照这个规则排序好的序列， 其结果不变。特别是当序列含有相同key的多元素的时候，元素的顺序依然是不变的。")],-1),h=o(`<p>执行这个测试，发现并没有通过。我们再多排序一次，发现又通过了。排序的结果有一点震荡，排序偶数次，结果正确，奇数次则错误。</p><p>我们不破坏比较函数，光是在<code>max_heapify</code>中修改对比较函数的调用，让“等于”情况向上排序：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">if</span> l <span class="token operator">&lt;</span> heap_size <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    largest <span class="token operator">=</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> r <span class="token operator">&lt;</span> heap_size <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    largest <span class="token operator">=</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，幂等性测试通过了。</p>`,4);function g(w,_){const p=t("RouteLink"),c=t("Tabs");return r(),k("div",null,[n("p",null,[e(p,{to:"/posts/2024-3-2-issue-of-callback.html"},{default:a(()=>[s("之前的文章")]),_:1}),s("中提到了比较函数中，小于号与小于等于号的区别。 比较函数应当符合许多性质，首先应当符合的就是传递性，如果函数返回的结果是随机的，那么整个排序的结果也是随机的。")]),d,v,e(c,{id:"9",data:[{id:"lib.rs"}]},{title0:a(({value:l,isActive:u})=>[s("lib.rs")]),tab0:a(({value:l,isActive:u})=>[b]),_:1},8,["data"]),y,f,h])}const q=i(m,[["render",g],["__file","2024-3-28-idempotence-of-heap-sort.html.vue"]]),S=JSON.parse('{"path":"/posts/2024-3-28-idempotence-of-heap-sort.html","title":"Rust与算法基础（9）：堆排序的幂等性","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（9）：堆排序的幂等性","date":"2024-03-28T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"中提到了比较函数中，小于号与小于等于号的区别。 比较函数应当符合许多性质，首先应当符合的就是传递性，如果函数返回的结果是随机的，那么整个排序的结果也是随机的。 比较函数使用小于号会使等于的情况下，把本来的先后关系对调。待插入对象是在已插入数组右边的，一直在向左移动。 所以遇“等”就停合情合理。 但当用同样的测试测下面这个堆排序，就出了问题。 当vec里...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-3-28-idempotence-of-heap-sort.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（9）：堆排序的幂等性"}],["meta",{"property":"og:description","content":"中提到了比较函数中，小于号与小于等于号的区别。 比较函数应当符合许多性质，首先应当符合的就是传递性，如果函数返回的结果是随机的，那么整个排序的结果也是随机的。 比较函数使用小于号会使等于的情况下，把本来的先后关系对调。待插入对象是在已插入数组右边的，一直在向左移动。 所以遇“等”就停合情合理。 但当用同样的测试测下面这个堆排序，就出了问题。 当vec里..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-28T14:02:01.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-28T14:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（9）：堆排序的幂等性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-28T14:02:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1711634521000,"updatedTime":1711634521000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":1}]},"readingTime":{"minutes":3.47,"words":1041},"filePathRelative":"posts/2024-3-28-idempotence-of-heap-sort.md","localizedDate":"2024年3月28日","excerpt":"<p><a href=\\"/posts/2024-3-2-issue-of-callback.html\\" target=\\"_blank\\">之前的文章</a>中提到了比较函数中，小于号与小于等于号的区别。\\n比较函数应当符合许多性质，首先应当符合的就是传递性，如果函数返回的结果是随机的，那么整个排序的结果也是随机的。</p>\\n<p>比较函数使用小于号会使等于的情况下，把本来的先后关系对调。待插入对象是在已插入数组右边的，一直在向左移动。\\n所以遇“等”就停合情合理。</p>\\n<p>但当用同样的测试测下面这个堆排序，就出了问题。</p>\\n\\n<p>当vec里存在两个key相同的元素时，排序与理想的结果不符。两个相同key的元素应当在排序后维持原来的左右关系，然而并没有。</p>","autoDesc":true}');export{q as comp,S as data};
