import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as k,a as n,b as s,d as t,w as p,e as r}from"./app-CdUC-x8y.js";const m={},d=n("h2",{id:"除了forget外-另一种解决方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#除了forget外-另一种解决方式"},[n("span",null,"除了forget外，另一种解决方式")])],-1),v={href:"https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html",target:"_blank",rel:"noopener noreferrer"},b=r(`<p>官方文档里的例子是类似这样的用法：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token class-name">ManuallyDrop</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token class-name">ManuallyDrop</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建对象，然后包裹进去。但我们现在不这么操作，将向量中一个一个元素创建ManuallyDrop然后塞进临时向量里， 和之前一个一个forget也没什么两样。</p><p>我们看官方文档的描述，最开头强调ManuallyDrop是“零开销（0-cost）”抽象：</p><blockquote><p>... This wrapper is 0-cost. <code>ManuallyDrop&lt;T&gt;</code> is guaranteed to have the same layout and bit validity as T ...</p></blockquote><p>也就是说在内存空间中存储的数据，<code>ManuallyDrop&lt;T&gt;</code>是与<code>T</code>完全一致，此即零开销。</p><p>这就意味着，我们可以通过改变指针类型，把一个类型的数据“当成”另一种数据，这是C/C++里常用的操作。</p><p>在merge函数里，把创建的临时数组类型</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> left_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>left_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;left allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> left_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>left_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>left_mem<span class="token punctuation">,</span> left_length<span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> right_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;right allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>right_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>right_mem<span class="token punctuation">,</span> right_length<span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改为<code>Vec&lt;ManuallyDrop&lt;T&gt;&gt;</code>的：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> left_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>left_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;left allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> left_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>left_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>left_mem<span class="token punctuation">,</span> left_length<span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> right_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;right allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>right_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>right_mem<span class="token punctuation">,</span> right_length<span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只改动了left_mem要转换成的指针类型，这个指针是<code>*mut ManuallyDrop&lt;T&gt;</code>类型的，其他都没有改。</p><p>left_layout没有改，因为0-cost，只要给出的长度（left_length/right_length）相同，申请的空间总大小（left_length*(size of T)）就是相同的。</p><p>而<code>Vec::from_raw_parts</code>因为第一个参数的指针类型变成了<code>*mut ManuallyDrop&lt;T&gt;</code>类型，left/right向量就是 <code>Vec&lt;ManuallyDrop&lt;T&gt;&gt;</code>类型的。</p><p>这么一改，下面的copy函数，编译器就报出了参数类型不匹配的错误了。</p><p>看到报错的代码里，比如这句：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>copy函数需要的参数都是生指针，而代入的参数是引用。这里因为引用可以用as关键字转为对应类型的生指针， 所以代入这个函数的时候已经隐式地转换了指针类型，所以这行代码等价于：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以我们只需要显式强转一下这个生指针类型就行了：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其他地方也做类似的转换，最终编译器通过，运行也正常。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">merge</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    p<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    q<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    r<span class="token punctuation">:</span> <span class="token keyword">usize</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left_length <span class="token operator">=</span> q <span class="token operator">-</span> p<span class="token punctuation">;</span>
    <span class="token keyword">let</span> right_length <span class="token operator">=</span> r <span class="token operator">-</span> q<span class="token punctuation">;</span>

    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> left_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>left_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;left allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> left_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>left_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>left_mem<span class="token punctuation">,</span> left_length<span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> right_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;right allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> right_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>right_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>right_mem<span class="token punctuation">,</span> right_length<span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> k <span class="token operator">=</span> p<span class="token punctuation">;</span>

        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> left_length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> left_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>
                left_length <span class="token operator">-</span> i
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>
                right_length <span class="token operator">-</span> j
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这两句</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为第二个参数就是指向向量第一个元素的指针，也就是指向新开辟内存的首位，这不就是left_mem/right_mem嘛。 所以可以直接改过去，变成：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> left_mem<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> right_mem<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器提示之前的left/right声明的变量可以不为可变的了，可以把mut删掉。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> left_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>left_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;left allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> left_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>left_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>left_mem<span class="token punctuation">,</span> left_length<span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> right_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;right allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>right_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>right_mem<span class="token punctuation">,</span> right_length<span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> left_mem<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> right_mem<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至可以把这两个copy提前到<code>from_raw_parts</code>前面，居然也能正常运行。</p><p>也就是说<code>Vec::from_raw_parts</code>函数，就是把一段开辟的堆空间“当成”是对应类型的向量。</p><p>最终的代码是这样的：</p>`,32),g=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token namespace"},[s("alloc"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),s(" alloc"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Layout"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("mem"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token punctuation"},","),s(" ptr "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("algorithms_prelude"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Sorter"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"MergeSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Sorter"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"merge_sort"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" p "),n("span",{class:"token operator"},"<"),s(" r "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" q "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"+"),s(" r"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"merge"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s(`
    vec`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    compare`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},","),s(`
    p`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(`
    q`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(`
    r`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" left_length "),n("span",{class:"token operator"},"="),s(" q "),n("span",{class:"token operator"},"-"),s(" p"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" right_length "),n("span",{class:"token operator"},"="),s(" r "),n("span",{class:"token operator"},"-"),s(" q"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"unsafe"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// ManuallyDrop的零成本抽象，让ManuallyDrop<T>和T在内存中的数据结构完全一致，也就允许用指针强转的方式强行写入。"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" left_layout "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Layout"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"array"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("left_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"expect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"left allocation failed!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 申请相应尺寸的空间（前面已定义），返回一个指针，但并没有假设你的指针是对应类型的，需要你手动强转一遍。"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" left_mem "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"alloc"),n("span",{class:"token punctuation"},"("),s("left_layout"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">>"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 强转指针，匹配类型"),s(`
        `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" left_mem"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" left_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_raw_parts"),n("span",{class:"token punctuation"},"("),s("left_mem"),n("span",{class:"token punctuation"},","),s(" left_length"),n("span",{class:"token punctuation"},","),s(" left_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"let"),s(" right_layout "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Layout"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"array"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("right_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"expect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"right allocation failed!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" right_mem "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"alloc"),n("span",{class:"token punctuation"},"("),s("right_layout"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">>"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("q"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" right_mem"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" right_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_raw_parts"),n("span",{class:"token punctuation"},"("),s("right_mem"),n("span",{class:"token punctuation"},","),s(" right_length"),n("span",{class:"token punctuation"},","),s(" right_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" j "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" k "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"while"),s(" i "),n("span",{class:"token operator"},"<"),s(" left_length "),n("span",{class:"token operator"},"&&"),s(" j "),n("span",{class:"token operator"},"<"),s(" right_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                i `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                j `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            k `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" i "),n("span",{class:"token operator"},"<"),s(" left_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
                left_length `),n("span",{class:"token operator"},"-"),s(` i
            `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(" j "),n("span",{class:"token operator"},"<"),s(" right_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token class-name"},"ManuallyDrop"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
                right_length `),n("span",{class:"token operator"},"-"),s(` j
            `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"test"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_sort_ascending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_sort_descending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},">"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_struct_sort_ascending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token attribute attr-name"},"#[derive(Debug, PartialEq)]"),s(`
        `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
            id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(`
            name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'static"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev"),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s(`
            v`),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_struct_sort_ascending_equal"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token attribute attr-name"},"#[derive(Debug, PartialEq)]"),s(`
        `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
            id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(`
            name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'static"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS2"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev"),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"<="),s(" next"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s(`
            v`),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS2"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_struct_sort_ascending_equal_box"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token attribute attr-name"},"#[derive(Debug, PartialEq)]"),s(`
        `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
            id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),n("span",{class:"token punctuation"},","),s(`
            name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'static"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS2"'),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev"),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"<="),s(" next"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s(`
            v`),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZL"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"SQ"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"ZS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"LS2"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token class-name"},"Box"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foo"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"WW"'),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("h2",{id:"再优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#再优化"},[n("span",null,"再优化")])],-1),f=n("p",null,"在这个归并排序中，每次合并都是将待合并的两个切片先拷贝到临时区域，再重新写入，一来一回，遍及整个向量。 显然有个拷贝更少的方案，就是让切分至末端的数组归并到临时的数组，再继续归并，最终才写入原数组，从反复横跳，到转一圈走完。",-1),w=n("p",null,"原本的复杂度是2nlgn，新的复杂度优化为(n+1)lgn。怎么优化，下一篇再说。",-1);function _(h,T){const o=a("ExternalLinkIcon"),e=a("Tabs");return i(),k("div",null,[d,n("p",null,[s("上一篇结尾用了forget函数避免了资源的重复释放，但是这种方法需要再钻进临时向量中，对元素一个个执行。 其实有另一种方法，可以在一开始就把资源标记为不需要释放，那就是 "),n("a",v,[s("ManuallyDrop"),t(o)]),s("。")]),b,t(e,{id:"84",data:[{id:"lib.rs"}]},{title0:p(({value:c,isActive:l})=>[s("lib.rs")]),tab0:p(({value:c,isActive:l})=>[g]),_:1},8,["data"]),y,f,w])}const q=u(m,[["render",_],["__file","2024-3-12-merge-sort-2.html.vue"]]),D=JSON.parse('{"path":"/posts/2024-3-12-merge-sort-2.html","title":"Rust与算法基础（6）：归并排序（中）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（6）：归并排序（中）","date":"2024-03-12T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"除了forget外，另一种解决方式 上一篇结尾用了forget函数避免了资源的重复释放，但是这种方法需要再钻进临时向量中，对元素一个个执行。 其实有另一种方法，可以在一开始就把资源标记为不需要释放，那就是 ManuallyDrop。 官方文档里的例子是类似这样的用法： 新建对象，然后包裹进去。但我们现在不这么操作，将向量中一个一个元素创建Manuall...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-3-12-merge-sort-2.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（6）：归并排序（中）"}],["meta",{"property":"og:description","content":"除了forget外，另一种解决方式 上一篇结尾用了forget函数避免了资源的重复释放，但是这种方法需要再钻进临时向量中，对元素一个个执行。 其实有另一种方法，可以在一开始就把资源标记为不需要释放，那就是 ManuallyDrop。 官方文档里的例子是类似这样的用法： 新建对象，然后包裹进去。但我们现在不这么操作，将向量中一个一个元素创建Manuall..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T13:12:18.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-12T13:12:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（6）：归并排序（中）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-12T13:12:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"除了forget外，另一种解决方式","slug":"除了forget外-另一种解决方式","link":"#除了forget外-另一种解决方式","children":[]},{"level":2,"title":"再优化","slug":"再优化","link":"#再优化","children":[]}],"git":{"createdTime":1710249138000,"updatedTime":1710249138000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":1}]},"readingTime":{"minutes":6.84,"words":2052},"filePathRelative":"posts/2024-3-12-merge-sort-2.md","localizedDate":"2024年3月12日","excerpt":"<h2>除了forget外，另一种解决方式</h2>\\n<p>上一篇结尾用了forget函数避免了资源的重复释放，但是这种方法需要再钻进临时向量中，对元素一个个执行。\\n其实有另一种方法，可以在一开始就把资源标记为不需要释放，那就是\\n<a href=\\"https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ManuallyDrop</a>。</p>\\n<p>官方文档里的例子是类似这样的用法：</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">use</span> <span class=\\"token namespace\\">std<span class=\\"token punctuation\\">::</span>mem<span class=\\"token punctuation\\">::</span></span><span class=\\"token class-name\\">ManuallyDrop</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> <span class=\\"token keyword\\">mut</span> x <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ManuallyDrop</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello World!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{q as comp,D as data};
