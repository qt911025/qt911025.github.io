const n=JSON.parse('{"key":"v-86d7b560","path":"/posts/2024-2-8-rust-issort-without-partialord.html","title":"Rust与算法基础（3）：用Rust实现插入排序（下）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（3）：用Rust实现插入排序（下）","date":"2024-02-08T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"上一集我们用unsafe实现去掉了排序函数的Copy特质限定。 这个排序函数只实现了升序排序，如果想要实现降序排序，需要另写一个函数吗？ 然而降序排序和升序排序仅仅是一个符号的区别，输入类型的差异的不同实现可以用泛型、重载等方法解决，而目的差异往往是需要另外实现。 加个降序？ 如果差异很小，我们可以再加些选项参数，并在函数内部实现里用一系列条件判定来控制，比如这样： pub fn sort&lt;Elem: PartialOrd&gt;(vec: &amp;mut Vec&lt;Elem&gt;, ascend: bool) { for i in 1..vec.len() { unsafe { let e = ptr::read(&amp;vec[i]); let mut j = i; if ascend { while j &gt; 0 &amp;&amp; &amp;vec[j - 1] &gt; &amp;e { ptr::copy(&amp;vec[j - 1], &amp;mut vec[j], 1); j = j - 1; } } else { while j &gt; 0 &amp;&amp; &amp;vec[j - 1] &lt; &amp;e { ptr::copy(&amp;vec[j - 1], &amp;mut vec[j], 1); j = j - 1; } } vec[j] = e; } } }","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-2-8-rust-issort-without-partialord.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（3）：用Rust实现插入排序（下）"}],["meta",{"property":"og:description","content":"上一集我们用unsafe实现去掉了排序函数的Copy特质限定。 这个排序函数只实现了升序排序，如果想要实现降序排序，需要另写一个函数吗？ 然而降序排序和升序排序仅仅是一个符号的区别，输入类型的差异的不同实现可以用泛型、重载等方法解决，而目的差异往往是需要另外实现。 加个降序？ 如果差异很小，我们可以再加些选项参数，并在函数内部实现里用一系列条件判定来控制，比如这样： pub fn sort&lt;Elem: PartialOrd&gt;(vec: &amp;mut Vec&lt;Elem&gt;, ascend: bool) { for i in 1..vec.len() { unsafe { let e = ptr::read(&amp;vec[i]); let mut j = i; if ascend { while j &gt; 0 &amp;&amp; &amp;vec[j - 1] &gt; &amp;e { ptr::copy(&amp;vec[j - 1], &amp;mut vec[j], 1); j = j - 1; } } else { while j &gt; 0 &amp;&amp; &amp;vec[j - 1] &lt; &amp;e { ptr::copy(&amp;vec[j - 1], &amp;mut vec[j], 1); j = j - 1; } } vec[j] = e; } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-08T14:28:46.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-08T14:28:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（3）：用Rust实现插入排序（下）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-08T14:28:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"加个降序？","slug":"加个降序","link":"#加个降序","children":[]},{"level":2,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1707402526000,"updatedTime":1707402526000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":1}]},"readingTime":{"minutes":3.3,"words":990},"filePathRelative":"posts/2024-2-8-rust-issort-without-partialord.md","localizedDate":"2024年2月8日","excerpt":"<p>上一集我们用unsafe实现去掉了排序函数的Copy特质限定。\\n这个排序函数只实现了升序排序，如果想要实现降序排序，需要另写一个函数吗？\\n然而降序排序和升序排序仅仅是一个符号的区别，输入类型的差异的不同实现可以用泛型、重载等方法解决，而目的差异往往是需要另外实现。</p>\\n<h2> 加个降序？</h2>\\n<p>如果差异很小，我们可以再加些选项参数，并在函数内部实现里用一系列条件判定来控制，比如这样：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-ext=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">sort</span><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">Elem</span><span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">PartialOrd</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>vec<span class=\\"token punctuation\\">:</span> <span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> <span class=\\"token class-name\\">Vec</span><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">Elem</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span> ascend<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">bool</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">..</span>vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">unsafe</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">let</span> e <span class=\\"token operator\\">=</span> <span class=\\"token namespace\\">ptr<span class=\\"token punctuation\\">::</span></span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>vec<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">let</span> <span class=\\"token keyword\\">mut</span> j <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> ascend <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">while</span> j <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">&amp;</span>vec<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&amp;</span>e <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token namespace\\">ptr<span class=\\"token punctuation\\">::</span></span><span class=\\"token function\\">copy</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>vec<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> vec<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    j <span class=\\"token operator\\">=</span> j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">while</span> j <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">&amp;</span>vec<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token operator\\">&amp;</span>e <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token namespace\\">ptr<span class=\\"token punctuation\\">::</span></span><span class=\\"token function\\">copy</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>vec<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> vec<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    j <span class=\\"token operator\\">=</span> j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            vec<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
