import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as r,c as d,d as o,w as a,a as n,b as s,e as c}from"./app-Ck1v2Gs7.js";const m={},v=n("p",null,"来实现一个归并排序，照例，按照算法导论第三版（《Introduction to Algorithms》）的伪代码，结合之前插入排序的写法。 先写一个有PartialOrd + Copy特质的（这里就略过了），再改为无Copy特质、PartialOrd用回调代替的。",-1),b=n("p",null,"main和lib没什么大变化：",-1),y=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),s("ptr"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("algorithms_prelude"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Sorter"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"MergeSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Sorter"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"merge_sort"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" p "),n("span",{class:"token operator"},"<"),s(" r "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" q "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"+"),s(" r"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge_sort"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"merge"),n("span",{class:"token punctuation"},"("),s("vec"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},","),s(" q"),n("span",{class:"token punctuation"},","),s(" r"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"merge"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s(`
    vec`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    compare`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},","),s(`
    p`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(`
    q`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),n("span",{class:"token punctuation"},","),s(`
    r`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"usize"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" left_length "),n("span",{class:"token operator"},"="),s(" q "),n("span",{class:"token operator"},"-"),s(" p"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" right_length "),n("span",{class:"token operator"},"="),s(" r "),n("span",{class:"token operator"},"-"),s(" q"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"with_capacity"),n("span",{class:"token punctuation"},"("),s("left_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"with_capacity"),n("span",{class:"token punctuation"},"("),s("right_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"unsafe"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" left"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" left_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 运行时报错"),s(`
        `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("q"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" right"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" right_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 运行时报错"),s(`

        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" j "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" k "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"while"),s(" i "),n("span",{class:"token operator"},"<"),s(" left_length "),n("span",{class:"token operator"},"&&"),s(" j "),n("span",{class:"token operator"},"<"),s(" right_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                i `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                j `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            k `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" i "),n("span",{class:"token operator"},"<"),s(" left_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("left"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" left_length "),n("span",{class:"token operator"},"-"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(" j "),n("span",{class:"token operator"},"<"),s(" right_length "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("ptr"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"copy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("right"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" vec"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" right_length "),n("span",{class:"token operator"},"-"),s(" j"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"test"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_sort_ascending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("algorithms_prelude"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Sorter"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("merge_sort"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),s("env"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" int_array"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token namespace"},[s(`env
        `),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"args"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"skip"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("s"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"parse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"collect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token class-name"},"MergeSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" int_array"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    int_array`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"iter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"for_each"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("e"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{:?}"'),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=c(`<p><code>merge_sort</code>会实现成一个递归函数，照例，产生临时存储区，用<code>ptr::copy</code>来复制整块数据。</p><p>相对于原书，p、q、r的意义有了一些改变，原书的伪代码第一个索引是从1开始数的，遍历循环，数组的右界是个闭区间。 也就是A[p..r]，p是第一个，r是最后一个。显然索引从1开始的话，A[A.length()]就是最后一个数，而程序中并不是这样。</p><blockquote><p>[1..5] =&gt; [1, 5] =&gt; [1, 2, 3, 4, 5]</p></blockquote><p>Rust是从0开始数的，那么数组的最后一个数的下标就是数组长度减一。用数学符号表示的话，表示一个数组总是要用左闭右开区间。 取一个数组的切片，从p到r（[p, r)），如果r是开区间的话，取这个切片的长度正好就是r-p，不需要像原书那样还要加个1。</p><blockquote><p>[0, 5) =&gt; [0, 1, 2, 3, 4]</p></blockquote><p>习惯了用这种方式思考，切片、取长短就不用费神去想哪里要+1哪里要-1了。在这里，p代表的是左界（闭），r是右界（开）。 q是切分位，q是左边数组的右界（开），右边数组的左界（闭）。</p><blockquote><p>[p, r) =&gt; [p, q) 与 [q, r)</p></blockquote><p>当切分一个偶数长度的数组时，右界与左界的平均数正好为切分位，比如长度为4的数组下标是<code>0, 1, 2, 3</code>，切分位正好为2。 而当切分奇数长度的数组时，直接取平均值，由于整数相除得到的小数取整是直接舍去小数位，所以结果总是向下取整。</p><p>切分出的数组，右边长度总是大于等于左边的，最终切出来的二叉树，右边会深一些。 如果想要深的在左边，就要想办法让切分位的计算向上取整。结合未整除向下取整的特性，只需要使计算平均数时分子+1。 所以得到这样的表达式：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>递归函数<code>merge_sort()</code>的终止条件是待切分数组的长度小于等于1，长度为1的数组切分之后得到的是长度0和长度1的数组， 这样就无法终止了。所以在将两个长度为1的数组传进<code>merge_sort()</code>时，递归函数什么都不做，就能执行到合并函数<code>merge()</code>了。</p><p>merge函数的意图是将数组切分开，暂存为两个数组。这两个切分开的数组可以理解成两个已经排序好的牌堆， 比较牌堆顶的牌，取最小的那张（升序排序），牌堆顶中最小的牌就是两个牌堆中最小的牌（证明略）。</p><h2 id="溢出" tabindex="-1"><a class="header-anchor" href="#溢出"><span>溢出</span></a></h2><p>理想的结果是，通过<code>Vec::with_capacity()</code>函数创造一个足够长度的向量，再通过<code>ptr::copy()</code>直接将切片拷到临时数组去。</p><p>然而运行的时候却报错了，错误信息是：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>...
index out of bounds: the len is 0 but the index is 0
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他信息就不贴了，断点调试找到报错的位置就是在<code>ptr::copy()</code>的时候，向量的长度为0，所以不能拷贝进去。 当然我们可以用<code>copy_from_slice</code>安全地拷贝，但现在我们要实现的是不安全复制，最终这些临时数组是要抛弃的， 结果上没有数据被拷贝，我们可以保证这个函数是安全的。</p><p>那么回到原来的问题，我们该怎么去实现呢？用fill_with之类的长度撑一下？ 这不就是在拷贝真正的数据之前先初始化了一遍吗？</p><p>那么Rust有没有像C/C++那种先申请空间再自行初始化的方法？当然有！不过在这之前，我们需要了解一下Rust的Vec是个什么结构。</p><p>Vec在其所在的地方保存了三个信息：一个指向申请的堆空间头部的指针，向量长度，和向量容量。 一个被安全初始化的Vec，指针指向的空间是已经申请好了的，向量长度由初始化决定，而向量容量是申请空间的长度。 Vec被不断地push数据，直到碰到向量容量，当碰到向量容量时，Vec会再申请一个新的更长的空间，把原来的数据拷贝过去，并释放原来的空间。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>            ptr      len  capacity
       +--------+--------+--------+
       | 0x0123 |      2 |      4 |
       +--------+--------+--------+
            |
            v
Heap   +--------+--------+--------+--------+
       |    &#39;a&#39; |    &#39;b&#39; | uninit | uninit |
       +--------+--------+--------+--------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以预知，向量的容量足够长，实际上不会遇到真正的溢出。但向量依然会用长度来禁止用不安全的方式随意拷贝数据到向量中， 只要是超过长度的下标，就不允许访问。</p><p>**但Vec本身提供了一个不安全的方法，允许你初始化一个有长度而未初始化的数组。**Vec在初始化时，比如这里用到的<code>with_capacity()</code>函数， 就是以传入的参数作为大小，去申请堆空间。在Rust里，需要创建Layout， 再对Layout申请空间（alloc），而Vec也是用这个流程申请空间的。</p><p>Vec提供的这个方法，就是让你照着Vec的内部实现，自定义初始化过程，这个方法就是：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">from_raw_parts</span><span class="token punctuation">(</span>
    ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    capacity<span class="token punctuation">:</span> <span class="token keyword">usize</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将代码改成这样：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span> <span class="token namespace">alloc<span class="token punctuation">::</span></span><span class="token punctuation">{</span> alloc<span class="token punctuation">,</span> <span class="token class-name">Layout</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> ptr <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">algorithms_prelude<span class="token punctuation">::</span></span><span class="token class-name">Sorter</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MergeSorter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">pub</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token class-name">Seq</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Elem</span><span class="token operator">&gt;</span> <span class="token class-name">Sorter</span> <span class="token keyword">for</span> <span class="token class-name">MergeSorter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Element</span> <span class="token operator">=</span> <span class="token class-name">Elem</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">sort_by</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Element</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">merge_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">merge_sort</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> r <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">merge</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    p<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    q<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    r<span class="token punctuation">:</span> <span class="token keyword">usize</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left_length <span class="token operator">=</span> q <span class="token operator">-</span> p<span class="token punctuation">;</span>
    <span class="token keyword">let</span> right_length <span class="token operator">=</span> r <span class="token operator">-</span> q<span class="token punctuation">;</span>

    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> left_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>left_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;left allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> left_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>left_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>left_mem<span class="token punctuation">,</span> left_length<span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> right_layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;right allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> right_mem <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span>right_layout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>right_mem<span class="token punctuation">,</span> right_length<span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> k <span class="token operator">=</span> p<span class="token punctuation">;</span>

        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> left_length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> left_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> left_length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> right_length <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试，成功了！</p><p><code>Layout::array::&lt;T&gt;(left_length)</code>是声明要申请的空间是什么类型的，这里就是一个元素为泛型T的数组。 Layout的创建本身是安全的，因为它只是“填个申请表”，还没真正开始申请空间，不安全的是alloc。 当alloc之后，就申请了一段未初始化数据的内存空间，并返回一个u8类型的可变引用，这个引用可以转为T类型的。</p><p>这个引用就是指向已申请空间的“指针”，把这个“指针”，传给<code>Vec::from_raw_parts</code>，设定好长度和容量， 就得到了一个没初始化，又有长度和容量的数组了。这样就可以将数据整段拷贝到新建的向量了。</p><h2 id="一数组的指针" tabindex="-1"><a class="header-anchor" href="#一数组的指针"><span>一数组的指针</span></a></h2>`,31),w=c(`<p>首先把测试用例拷过来，改一下方法名。运行报错了。</p><p>那么我们在结尾，也就是unsafe括号回之前加<code>forget</code>函数，</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行一下，测试是通过的。</p><p>**但是，这样并不好！**首先，这不是像插入排序那样，只是夺取一个变量的所有权，而是夺取一个数组的。</p><p>直接forget掉left和right，只是让这两个临时数组不会被回收掉。这两个临时数组没有被回收，也没有别的地方回收这两个数组， 就造成了内存泄漏。两个保存了一长串地址值的数组并没有被释放掉。而我们想要的“忘掉”，目的是避免重复释放。 重复释放是因为重复索引，重复索引的点在于数组中每一个Box指针，在临时数组中都有另一个“二重身”。我们的目的是精准除掉二重身， 需要的就是精准地“忘掉”每一个保存在临时数组里保存的Box指针，而保存指针的临时数组是应该被释放掉的。</p>`,6),h=c(`<p>所以正确的写法是：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> e <span class="token keyword">in</span> left <span class="token punctuation">{</span>
    <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> e <span class="token keyword">in</span> right <span class="token punctuation">{</span>
    <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="等等-不是成员不可移出吗" tabindex="-1"><a class="header-anchor" href="#等等-不是成员不可移出吗"><span>等等，不是成员不可移出吗？</span></a></h2><p>如果上面的两个for循环是这么写的：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>left<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>right<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会直接报成员不可移出的错。为什么前面的又没有问题，这是因为两者有本质区别。</p><p><code>for in</code>是一个针对迭代器的操作，而迭代器是一次性的。<code>in</code>的后面应该跟一个迭代器， left不是迭代器而是Vec，也没报错，是因为Vec实现了IntoIterator trait，它在这个调用里被隐式地执行了<code>left.into_iter()</code>。 <code>into_iter()</code>方法会夺取left向量的所有权，left在这里就被移出了。</p><p>这种将一个变量移动到一个函数中，参数夺取所有权的行为叫做<strong>consume，直白的翻译就是吃掉</strong>。<code>left</code>被<code>into_iter</code>吃掉生成了一个迭代器，迭代器本身又被for循环吃掉了，每次循环执行一次迭代函数<code>next()</code>，返回一个<strong>自带所有权的成员</strong>， 成员的所有权流入了for循环体的作用域中（也就是后面大括号包裹的区域），可以任意处置。</p><p>如果什么都不做，<code>e</code>会在本次循环结束时结束生命周期，默认执行<code>drop()</code>回收。<code>forget(e)</code>就是阻止<code>e</code>调用<code>drop()</code>。 这样只有外层这个包含了Box指针的left向量被回收了。</p><p>而对于第二种写法，left的所有权并没有被夺取，<code>left[i]</code>操作只是一次<strong>引用再解引</strong>。for循环体作用域并没有<code>left[i]</code>的所有权， 如果什么都不做，<code>left[i]</code>在循环结束后也不会被释放，这就是和前者的区别。</p>`,10);function _(q,x){const l=p("Tabs"),u=p("RouteLink"),i=p("Mermaid");return r(),d("div",null,[v,b,o(l,{id:"6",data:[{id:"lib.rs"},{id:"main.rs"}]},{title0:a(({value:t,isActive:e})=>[s("lib.rs")]),title1:a(({value:t,isActive:e})=>[s("main.rs")]),tab0:a(({value:t,isActive:e})=>[y]),tab1:a(({value:t,isActive:e})=>[f]),_:1},8,["data"]),g,n("p",null,[s("这个实现和之前的插入排序一样，还是没有解决堆中数据的释放问题。我们要按照"),o(u,{to:"/posts/2024-3-6-issue-of-pointer.html"},{default:a(()=>[s("这篇文章")]),_:1}),s("的方法， 解决这个问题。")]),w,o(i,{id:"mermaid-122",code:"eJxLL0osyFAIceJSAILi0iQIvyw1+fmslqcL2sDCIOCk4ZRfoQnmpualgGknBV1dOwXn6GdTNzzrXfd+T8eTHb1P+9e/bO99uqT3ZXvXsyn73u/pjAWrddTQAJqpqQnWgjAd1dac1LQSNGtdMa110dAAKYSahabHVUFXD+QoVIOLMtMz0E12xzTZTUMDrBJqNLoud5jZAM+tZu0="}),h])}const S=k(m,[["render",_],["__file","2024-3-3-merge-sort-1.html.vue"]]),A=JSON.parse('{"path":"/posts/2024-3-3-merge-sort-1.html","title":"Rust与算法基础（5）：归并排序（上）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（5）：归并排序（上）","date":"2024-03-03T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"来实现一个归并排序，照例，按照算法导论第三版（《Introduction to Algorithms》）的伪代码，结合之前插入排序的写法。 先写一个有PartialOrd + Copy特质的（这里就略过了），再改为无Copy特质、PartialOrd用回调代替的。 main和lib没什么大变化： merge_sort会实现成一个递归函数，照例，产生临时...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-3-3-merge-sort-1.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（5）：归并排序（上）"}],["meta",{"property":"og:description","content":"来实现一个归并排序，照例，按照算法导论第三版（《Introduction to Algorithms》）的伪代码，结合之前插入排序的写法。 先写一个有PartialOrd + Copy特质的（这里就略过了），再改为无Copy特质、PartialOrd用回调代替的。 main和lib没什么大变化： merge_sort会实现成一个递归函数，照例，产生临时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-14T13:45:59.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-03-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-14T13:45:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（5）：归并排序（上）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-14T13:45:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"溢出","slug":"溢出","link":"#溢出","children":[]},{"level":2,"title":"一数组的指针","slug":"一数组的指针","link":"#一数组的指针","children":[]},{"level":2,"title":"等等，不是成员不可移出吗？","slug":"等等-不是成员不可移出吗","link":"#等等-不是成员不可移出吗","children":[]}],"git":{"createdTime":1709561696000,"updatedTime":1710423959000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":4}]},"readingTime":{"minutes":10.34,"words":3102},"filePathRelative":"posts/2024-3-3-merge-sort-1.md","localizedDate":"2024年3月3日","excerpt":"<p>来实现一个归并排序，照例，按照算法导论第三版（《Introduction to Algorithms》）的伪代码，结合之前插入排序的写法。\\n先写一个有PartialOrd + Copy特质的（这里就略过了），再改为无Copy特质、PartialOrd用回调代替的。</p>\\n<p>main和lib没什么大变化：</p>\\n\\n<p><code>merge_sort</code>会实现成一个递归函数，照例，产生临时存储区，用<code>ptr::copy</code>来复制整块数据。</p>\\n<p>相对于原书，p、q、r的意义有了一些改变，原书的伪代码第一个索引是从1开始数的，遍历循环，数组的右界是个闭区间。\\n也就是A[p..r]，p是第一个，r是最后一个。显然索引从1开始的话，A[A.length()]就是最后一个数，而程序中并不是这样。</p>","autoDesc":true}');export{S as comp,A as data};
