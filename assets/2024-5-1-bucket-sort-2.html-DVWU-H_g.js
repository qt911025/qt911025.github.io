import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as u,o as i,c as k,d as e,w as t,e as p,a as n,b as s}from"./app-Ck1v2Gs7.js";const r={},d=p('<p>算法学习已经进入了一个新阶段，开始变得越来越难了。后面将会接触到各种各样的数据结构，这些数据结构大多是链式的。 链式的数据结构对于rust来说是个大坑，错综复杂的索引关系和Rust的内存安全机制八字不合。</p><p>今天就来个开胃菜，用链表实现桶。</p><h2 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析"><span>需求分析</span></a></h2><p>首先确定一下需要什么接口，先看看序列桶用到了哪些功能，我们实现链表桶就出一个对应的：</p><ul><li>建造桶的集合还是用Vec实现，只是桶换成链表而已</li><li>不需要插入后再集中排序，而是插入时就插入指定的位置，所以需要一个<code>insert</code>方法</li><li>桶要像<code>Vec</code>一样能转成迭代器，只需要实现吃所有权的迭代器就行，引用迭代器不用实现</li></ul><p>排序函数就改造成这样：</p>',6),m=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"linked_list_bucket"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("linked_list_bucket"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("conv"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 桶排序"),s(`
`),n("span",{class:"token comment"},"// 适用于输入元素的值均匀分布在[0,1)，或者能近似线性地建立单射者"),s(`
`),n("span",{class:"token comment"},"// 根据输入的规模n，建立大小为n的桶集"),s(`
`),n("span",{class:"token comment"},"// 输入元素乘以n并向下取整，结果会分布在[0,n)中"),s(`
`),n("span",{class:"token comment"},"// 找到对应的桶，桶是一个链表，元素按线性查找插入排序到桶中"),s(`
`),n("span",{class:"token comment"},"// 将所有桶首尾相接"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"bucket_sort"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"F"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" mapper"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'static"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token operator"},">"),s(`
    `),n("span",{class:"token keyword"},"where"),s(),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"f64"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" arr_length "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 建桶"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" buckets"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Bucket"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"with_capacity"),n("span",{class:"token punctuation"},"("),s("arr_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    buckets`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resize_with"),n("span",{class:"token punctuation"},"("),s("arr_length"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token class-name"},"Bucket"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 进桶"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" e "),n("span",{class:"token keyword"},"in"),s(" arr "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"mapper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" key "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0.0"),s(),n("span",{class:"token operator"},"&&"),s(" key "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"1.0"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" bucket_id "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token punctuation"},"("),s("arr_length "),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token keyword"},"f64"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"approx_as"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"usize"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            buckets`),n("span",{class:"token punctuation"},"["),s("bucket_id"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"元素值溢出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 排序每个桶，并连接"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" result "),n("span",{class:"token operator"},"="),s(` buckets
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"into_iter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"flat_map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("bucket"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" bucket"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"collect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("p",null,[s("创建了一个模块"),n("code",null,"linked_list_bucket"),s("，所以新建一个"),n("code",null,"linked_list_bucket.rs"),s("文件，初步实现几个接口。 这个链表是"),n("em",null,"无头节点式"),s("的，开头比较插入的判定会多一点。")],-1),b=p(`<p>先看看数据结构和接口的设计，首先设计一个桶（<code>Bucket</code>）类，再设计一个节点（<code>Node</code>）类。 此外还类型指定了了一个链（<code>Link</code>）类，链和节点是相互包含的关系。</p><p>为了防止静态分析无限递归，Link包含了一个Box指针。这个Box指针外部包裹了一个Option泛型，表示可能不存在。</p><p><code>new</code>是新建一个空桶，<code>insert</code>是插入排序，插入的元素会根据<code>key</code>，在桶中的元素中挨个查询，直到找到<code>key</code>大于新插入元素的key的对象， 放在找到的元素的前面。</p><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h2><p>实现一下<code>insert</code>：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> elem<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> new_node <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 空桶</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>head_node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> head_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                <span class="token comment">//插入开头</span>
                new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 顺序查询</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur_node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数在本作用域创建了一个<code>Box&lt;Node&lt;T&gt;&gt;</code>类型的新节点，因为后面要改变next的值，所以要加<code>mut</code>。</p><p>这里要注意的是本作用域创建的新节点，<code>new_node</code>是拥有这个对象的所有权的。因为需要修改成员，所以要求成员得是可变的， 所以要求包含它的对象也是可变的。</p><p><code>Option</code>的<code>take</code>函数是一个安全的函数，会将<code>Some()</code>返回，并将原来位置替换成<code>None</code>，用来实现链表节点指针的替换。</p><h2 id="成员的移出" tabindex="-1"><a class="header-anchor" href="#成员的移出"><span>成员的移出</span></a></h2><p>当然这段代码没法通过编译，我们一个一个排查。首先看这行：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里显示的是<code>self.head</code>无法被移出，通过这个可以知道<code>match</code>操作，以及<code>if let</code>、还有各种析取赋值操作本质上还是和一般的赋值一样， 都是移出行为。<code>self</code>只是一个可变引用，自然无法移出其成员（field）。</p><p>如果<code>self</code>的所有权进入了这个函数，它的成员就可以移出了，因为<code>self</code>本身活不过这个作用域了。</p><p>那么这里就得改成：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">match</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得是可变引用，因为后面要修改<code>head</code>属性。</p><p>这样一改，后面的类型就对不上了:</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>cur_node</code>是<code>&amp;mut Box&lt;Node&lt;T&gt;&gt;</code>类型的，但<code>next_node</code>是<code>Box&lt;Node&lt;T&gt;&gt;</code>类型的。 试着改一下这句，直接创建它的可变引用。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>cur_node <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> next_node<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这下编译器暴露出了一个新问题，<code>cur_node.next</code>不能移出，原因和<code>self.head</code>不能移出是一样的。<code>cur_node</code>只有可变引用，不能将成员<code>next</code>移出。</p><p>那么用同样的方法改过来：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候<code>next_node</code>已经是<code>&amp;mut Box&lt;Node&lt;T&gt;&gt;</code>类型的了，下面就不需要<code>&amp;mut</code>了，改回来。</p><p>整个函数现在变成了这样：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> elem<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> new_node <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 空桶</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>head_node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> head_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                <span class="token comment">//插入开头</span>
                new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 顺序查询</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur_node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在最恼火的部分来了，最后两句无论怎么改，都是可变引用多次借出问题，如果改成不可变引用，本身就不允许修改。</p><p>但是cur_node是每一步都指向一个新的节点，到底是哪里重复借用了呢？</p><h2 id="引用与借用" tabindex="-1"><a class="header-anchor" href="#引用与借用"><span>引用与借用</span></a></h2><h3 id="真正的含义" tabindex="-1"><a class="header-anchor" href="#真正的含义"><span>真正的含义</span></a></h3><p>到现在为止，我们好像都是在被编译器牵着鼻子走，编译器教我们改哪里我们就改哪里，改到编译器通过为止。 虽然编译器通过了，运行可能也没问题，但我们还是对其中的概念一头雾水，下次还是会出同样的问题。</p><p>引用、借用，哪怕是看《The Rust Book》还是《Rust Primer》，都只是一笔带过。编译器的错误信息都比书本解释得清楚。</p><p>我们应该先搞清楚引用和借用得含义。如果懂得这到底是什么，你甚至会发现“引用和借用有什么区别”是个蠢问题。</p><p>引用是reference，借用是borrow，只看中文，两个词只差了一个字，而且两个词几乎在所有场合都是一同出现的。 很容易让人想到这两个词是同义词，是写书的人在随意混用，甚至还有老师直接就告诉你“引用和借用是一个意思，你知道是什么回事就行”。</p><p>然而看原文，reference是名词，而borrow是动词。编译器提示里，也从来不会搞错reference和borrow，两者一换就是病句了。</p><p>其实<strong>引用是一种数据类型，而借用是一个行为</strong>。当我们“引用”时，不应该说“我们引用了”，而应该说我们“创建了一个引用”。</p><p>那么这个例子：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">;</span>

<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应当这么解释：</p><p>声明了一个可变变量a和一个不可变变量b。</p><p>a变量初始化了一个值，为1，变量a拥有1这个对象的所有权；同理，我们创建了一个对a的可变引用，这也是一个对象，这个可变引用本身的所有权交给了b。</p><p>这个“b得到&amp;mut a的所有权”的行为被定义为“变量a被借给了b”。</p><p>只要清楚借用本质上也是一个新建对象和移交所有权的过程就行。</p><h3 id="有借有还-再借不难" tabindex="-1"><a class="header-anchor" href="#有借有还-再借不难"><span>有借有还，再借不难</span></a></h3><p>不可变引用是允许多次创建的。而可变引用只能从未被借用的变量中创建，即使被借用过，也要先归还。</p><p>写Rust的时候总是有一种感觉，就是借用一借出去，这个变量就废了，因为借用从来就没还过，借用了之后这个变量也不允许移动了。</p><p>但这其实还是幸存者偏差，因为成功编译通过的程序你并不关心。</p><p>我们已经知道引用的创建本质上还是在创建一个对象并赋值到变量上，也是所有权转移，有所有权就有生命周期。 引用也是有生命周期的，生命周期的结束就在这个引用“被吃掉（consumed）”的时候。</p><p>引用和非引用只有一点区别，那就是非引用被吃掉之后，将会在更内层的作用域内走到生命终点，它的结局是被Drop掉； 而引用本身的生命周期结束，就意味着引用对象没了，但本尊还在。引用对象没了，也就意味着本尊又自由了，可以再创建引用了。</p><p>此外，Rust的静态分析还会判断每一个应用最后一次被访问是在哪一行，来确定引用的生命周期。 所以即使引用被赋值给和本尊同一个作用域内的其他变量，这个变量也会被视为在最后一次访问时结束生命周期，之后本尊就可以被访问了。</p><p>像这段代码：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是可以被编译通过的。尽管第一个<code>println</code>就传入了一个不可变引用，实际上b并没有被传进这个宏（宏内包的作用域，效果和函数是一样的，可以把这个宏当函数看）。</p><p>在b被传进println前，b其实隐式地执行了一个“解引再引用”的操作，也就是<code>&amp;*b</code>（注意&amp;在前*在后）。这是合法的，这也会导致b本身被借用了，必须得等传进去的<code>&amp;*b</code>结束生命周期才会归还。</p><p>println本身就把<code>&amp;*b</code>吃掉了，所以b在执行完println后又可以访问了，可以再解引并改值。后来的也是这样操作，而编译器会分析b在之后不会再被访问，就在第二个println后结束生命周期， 让a可以访问。</p><p>这要是把<code>a = 3</code>放到前面几行，除非放在<code>b</code>创建之前，<code>a = 3</code>都会报改动已借出变量的错的。</p><h3 id="五脏六腑怎么借" tabindex="-1"><a class="header-anchor" href="#五脏六腑怎么借"><span>五脏六腑怎么借？</span></a></h3><p>前面提到，想要修改一个变量的成员，必须让这个变量是可变变量，以此类推，修改成员的成员，也要求最顶层是可变的。</p><p>对应到引用的创建，也是同理，拥有一个变量的引用，将其解引，得到的可变性与这个引用相同。可变引用解引才可变，否则不可变。 那么将一个不可变引用解引，创建其成员的引用，也只能创建不可变的，反过来则是自由的。</p><p>当然，<strong>内部可变模式</strong>可以打破这个规则，不过这里不考虑。</p><p>回到桶实现，这里的问题就是有一个变量，它不断地向内索引，这个其实是合法的，我把后面两句注释掉，就不报错了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
    <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// new_node.next = cur_node.next.take();</span>
<span class="token comment">// cur_node.next = Some(new_node);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rust的静态分析并不会知道你是要实现一个链表，只会将你实现的链表理解为一个非常深的包含关系。 这个循环就意味着cur_node是不断地向内借用其成员，那么包含这个成员的可变引用，在最深层的借用被归还前，会一直被占用着。</p><p>这个while循环可以理解为：不断地可变借用<code>cur_node.next</code>，直到终止条件break，如果break能被执行，那么意味着<code>let Some(next_node) = &amp;mut cur_node.next</code> 仍为<code>true</code>，并且<code>cur_node</code>没有执行else分支的语句，所以<code>&amp;mut cur_node.next</code>依然还在借出；而另一个情况就是while判定得到<code>&amp;mut cur_node.next</code>为None的情况， 循环终止时，这个判定语句还是被执行了一遍，那么<code>cur_node = next_node</code>之后还有一次<code>&amp;mut cur_node.next</code>。</p><p>无论哪种情况，<code>&amp;mut cur_node.next</code>总是最后执行，这也是后两句能成立的基石，同样也因为最后总是已经可变借出了<code>cur_node.next</code>， 导致不可再可变借出。</p><p>但实际上，静态分析总不可能连这都分析到了，静态分析只会分析分支，它会把while循环也当成条件分支去分析，while在静态分析里和if是一样的。 它的问题其实不在这里。</p><p>我们可以改另一行看看：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
    <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        next_node<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
        <span class="token comment">// cur_node = next_node;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur_node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cur_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行居然也不会报错，但为什么反而是因为就改了这句，多次可变借用就不报错了呢？ 发生这种情况是因为编译器认为前一次可变借用已经归还，为什么编译器会这么认为呢？</p><p>我们改成这个等价情形方便理解：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
    <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
        <span class="token comment">// break;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// next_node.key = 0.0;</span>
        cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur_node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cur_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if let</code>表达式的作用域是这样的：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur_node<span class="token punctuation">.</span>next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表达式本身就是在<code>if let</code>作用域内的，你在这个<code>if let</code>大括号之外的地方访问<code>next_node</code>，是访问不到的。</p><p>如果<code>cur_node = next_node</code>没有执行，<code>next_node</code>的生命周期会在这个作用域内结束，顺带地这个析取赋值，<code>Some(next_node)</code>的生命周期也会结束。</p><p>变量的生命周期结束，则意味着<code>&amp;mut cur_node.next</code>被编译器认为是最后一次使用了。所以这个借用就归还了。</p><p>如果<code>cur_node = next_node</code>执行了，就意味着<code>next_node</code>被带出了作用域。这和函数的返回值不会被drop掉一样，所有权被带出去了。 那么<code>next_node</code>，作为<code>cur_node.next</code>的成员，成员的借用没有被归还，而是保存在了<code>cur_node</code>中，自然包含这个成员的<code>&amp;mut cur_node.next</code>也不会被释放。</p><p>所以这导致了两次借用。</p><h2 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决"><span>如何解决？</span></a></h2><p>可以用<strong>内部可变模式</strong>，这需要用到<code>RefCell</code>，但这意味着又得加一层，Link会变成</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">type</span> <span class="token type-definition class-name">Link</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可怕。。。</p><p>而且具体调用需要各种显式调用<code>borrow_mut()</code>，烦得要死。</p><p>其实这种涉及底层的实现就应该简单粗暴，只要你懂的背后的内存分配原理，最简单的才是最安全的。</p><p>人还能被尿憋死？上unsafe！</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 顺序查询</span>
<span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token punctuation">{</span>
        <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可变裸指针不会隐式地解引了，需要你手动解引，所以都改成<code>(*cur_node)</code>。</p><h2 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代"><span>迭代！</span></a></h2><p>最终实现是这样的:</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    head<span class="token punctuation">:</span> <span class="token class-name">Link</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token type-definition class-name">Link</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Node</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    key<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
    elem<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    next<span class="token punctuation">:</span> <span class="token class-name">Link</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Bucket</span> <span class="token punctuation">{</span> head<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// key升序插入，顺序查询</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> elem<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> new_node <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">None</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token punctuation">{</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 0</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>head_node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> head_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                    <span class="token comment">//插入开头</span>
                    new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 顺序查询</span>
                    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
                        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_node <span class="token operator">=</span> head_node <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
                        <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> next_node<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> new_node<span class="token punctuation">.</span>key <span class="token punctuation">{</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                cur_node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        new_node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">(</span><span class="token operator">*</span>cur_node<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 递归释放变循环释放</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_link <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> box_node<span class="token punctuation">)</span> <span class="token operator">=</span> cur_link <span class="token punctuation">{</span>
            cur_link <span class="token operator">=</span> box_node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">BucketIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">IntoIterator</span> <span class="token keyword">for</span> <span class="token class-name">Bucket</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">IntoIter</span> <span class="token operator">=</span> <span class="token class-name">BucketIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">into_iter</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">IntoIter</span> <span class="token punctuation">{</span>
        <span class="token class-name">BucketIter</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 迭代器 只实现夺取所有权的</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">BucketIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 弹出</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>node<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>elem
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接看后面的迭代器实现，首先要有一个迭代器结构体<code>BucketIter&lt;T&gt;</code>， 然后实现一个从<code>Bucket&lt;T&gt;</code>到<code>BucketIter&lt;T&gt;</code>的<code>IntoIterator</code>trait， 还要为<code>BucketIter&lt;T&gt;</code>本身实现<code>Iterator</code>Trait。</p><p>用链表实现的桶，插入排序是顺序查找的，链表本身很难实现二分查找，因为二分查找的界索引值是计算出来的。</p><p>同样是将新元素一个个放进桶，每次放进都进行一次排序，这个过程和一种复杂度更低的算法很像，那就是堆。</p><p>下一篇我们直接实现一个链二叉堆，再次提速（并不能）！</p>`,95);function y(w,_){const a=u("Tabs");return i(),k("div",null,[d,e(a,{id:"32",data:[{id:"lib.rs"}]},{title0:t(({value:o,isActive:c})=>[s("lib.rs")]),tab0:t(({value:o,isActive:c})=>[m]),_:1},8,["data"]),v,e(a,{id:"40",data:[]}),b])}const f=l(r,[["render",y],["__file","2024-5-1-bucket-sort-2.html.vue"]]),x=JSON.parse('{"path":"/posts/2024-5-1-bucket-sort-2.html","title":"Rust与算法基础（14）：桶排序（中）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（14）：桶排序（中）","date":"2024-05-01T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"算法学习已经进入了一个新阶段，开始变得越来越难了。后面将会接触到各种各样的数据结构，这些数据结构大多是链式的。 链式的数据结构对于rust来说是个大坑，错综复杂的索引关系和Rust的内存安全机制八字不合。 今天就来个开胃菜，用链表实现桶。 需求分析 首先确定一下需要什么接口，先看看序列桶用到了哪些功能，我们实现链表桶就出一个对应的： 建造桶的集合还是用...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-5-1-bucket-sort-2.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（14）：桶排序（中）"}],["meta",{"property":"og:description","content":"算法学习已经进入了一个新阶段，开始变得越来越难了。后面将会接触到各种各样的数据结构，这些数据结构大多是链式的。 链式的数据结构对于rust来说是个大坑，错综复杂的索引关系和Rust的内存安全机制八字不合。 今天就来个开胃菜，用链表实现桶。 需求分析 首先确定一下需要什么接口，先看看序列桶用到了哪些功能，我们实现链表桶就出一个对应的： 建造桶的集合还是用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-01T14:38:12.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-01T14:38:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（14）：桶排序（中）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-01T14:38:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":2,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":2,"title":"成员的移出","slug":"成员的移出","link":"#成员的移出","children":[]},{"level":2,"title":"引用与借用","slug":"引用与借用","link":"#引用与借用","children":[{"level":3,"title":"真正的含义","slug":"真正的含义","link":"#真正的含义","children":[]},{"level":3,"title":"有借有还，再借不难","slug":"有借有还-再借不难","link":"#有借有还-再借不难","children":[]},{"level":3,"title":"五脏六腑怎么借？","slug":"五脏六腑怎么借","link":"#五脏六腑怎么借","children":[]}]},{"level":2,"title":"如何解决？","slug":"如何解决","link":"#如何解决","children":[]},{"level":2,"title":"迭代！","slug":"迭代","link":"#迭代","children":[]}],"git":{"createdTime":1714573692000,"updatedTime":1714574292000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":2}]},"readingTime":{"minutes":13.97,"words":4190},"filePathRelative":"posts/2024-5-1-bucket-sort-2.md","localizedDate":"2024年5月1日","excerpt":"<p>算法学习已经进入了一个新阶段，开始变得越来越难了。后面将会接触到各种各样的数据结构，这些数据结构大多是链式的。\\n链式的数据结构对于rust来说是个大坑，错综复杂的索引关系和Rust的内存安全机制八字不合。</p>\\n<p>今天就来个开胃菜，用链表实现桶。</p>\\n<h2>需求分析</h2>\\n<p>首先确定一下需要什么接口，先看看序列桶用到了哪些功能，我们实现链表桶就出一个对应的：</p>\\n<ul>\\n<li>建造桶的集合还是用Vec实现，只是桶换成链表而已</li>\\n<li>不需要插入后再集中排序，而是插入时就插入指定的位置，所以需要一个<code>insert</code>方法</li>\\n<li>桶要像<code>Vec</code>一样能转成迭代器，只需要实现吃所有权的迭代器就行，引用迭代器不用实现</li>\\n</ul>","autoDesc":true}');export{f as comp,x as data};
