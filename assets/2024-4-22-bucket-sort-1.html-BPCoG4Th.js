import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as r,c as k,d as o,w as a,a as n,b as s,e as c}from"./app-Ck1v2Gs7.js";const m={},d=n("p",null,"大家好啊，今天我们就来完成《算法导论（第三版）》第八章的最后一节——桶排序。",-1),v=n("p",null,[s("当我们需要对一串大小为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"0"),n("mo",{separator:"true"},","),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"[0,1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"0"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("的序列进行排序，我们可以用桶排序算法。 这一串数在这个区间中分布越平均，算法的时间复杂度就越接近"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，而最坏情形的时间复杂度为$\\Omicron(n^2)。")],-1),b=n("p",null,[s("在输入的数据规模为n时，算法将"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"0"),n("mo",{separator:"true"},","),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"[0,1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"0"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("区间平均划分为n份，建立n个桶。 输入的数据也被等比拉长到"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"0"),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"[0,n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"0"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，将n乘以输入数据并向下取整，得知这个数据会被放进几号桶。")],-1),h=n("p",null,[s("每个数据进入桶时会进行一次插入排序，这个排序的时间复杂度就是整个算法时间复杂度的最大项。 现在要实现的插入桶的过程是一个顺序查找法，所以时间复杂度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("， 而之前的例子也实现了"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"lg"),n("mo",null,"⁡"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(n\\lg{n})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mop"},[s("l"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")]),n("span",{class:"mclose"},")")])])]),s("的比较排序，所以之后会逐步优化到这个速度。")],-1),y=n("h2",{id:"vec桶",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vec桶"},[n("span",null,"Vec桶")])],-1),g=n("p",null,"在优化前先实现一个简单版的，掌握掌握思想。",-1),w=n("p",null,"桶排序像之前的实现一样，会吃掉原序列，生成新序列。 算法总共分三步：",-1),f=n("ul",null,[n("li",null,"建桶"),n("li",null,"进桶"),n("li",null,"连桶")],-1),_=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("conv"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("issort"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("algorithms_prelude"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"CompareSorter"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"bucket_sort"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"f64"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"f64"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'static"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" arr_length "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 建桶"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" buckets"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"f64"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"with_capacity"),n("span",{class:"token punctuation"},"("),s("arr_length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    buckets`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resize_with"),n("span",{class:"token punctuation"},"("),s("arr_length"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 进桶"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" e "),n("span",{class:"token keyword"},"in"),s(" arr "),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" e "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0.0"),s(),n("span",{class:"token operator"},"&&"),s(" e "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"1.0"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" bucket_id "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("e "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token punctuation"},"("),s("arr_length "),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token keyword"},"f64"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"approx_as"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"usize"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            buckets`),n("span",{class:"token punctuation"},"["),s("bucket_id"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"元素值溢出"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 排序每个桶，并连接"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" result "),n("span",{class:"token operator"},"="),s(` buckets
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"into_iter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"flat_map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),n("span",{class:"token keyword"},"mut"),s(" bucket"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" bucket"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<="),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            bucket
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"collect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml","data-title":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"package"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"name"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"bucket_sort"'),s(`
`),n("span",{class:"token key property"},"version"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"0.1.0"'),s(`
`),n("span",{class:"token key property"},"edition"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"2021"'),s(`

`),n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"dependencies"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"conv"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"0.3.3"'),s(`
`),n("span",{class:"token key property"},"issort"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token key property"},"path"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"../_2_1_issort"'),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token key property"},"algorithms_prelude"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token key property"},"path"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"../algorithms_prelude"'),s(),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=c(`<p><code>resize_with</code>方法将数据批量填充，将arr扩充到指定大小。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> bucket_id <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> <span class="token punctuation">(</span>arr_length <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approx_as</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句则是一个数据转换问题，一个f64能表示的数的范围是非常大的，所以不能直接转成整型。 但这里程序是能保证这个f64转成的usize是在范围内的。Rust不支持转换，但我们可以引入<code>conv</code>库， 来转换这个数，既然已经能保证转换的数是符合大小的，就直接unwrap了。</p>`,3),M=n("blockquote",null,[n("p",null,[s("要较真的话，这依然是不安全的。f64只用52位来表示整型，当arr_length超过了"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"5")]),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"2^52")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"5")])])])])])])]),n("span",{class:"mord"},"2")])])]),s("，f64将会丢失精度，这样转换的数是不精确的。 当然相乘之后的数还是不会超限，所以不会崩溃，只是计算出来的bucket_id会不准。如果真的输入了这么长的数组的话，那就要考虑了。")])],-1),O=c(`<p>排序桶并连接这一步，用的是函数式编程方法。<code>into_iter</code>会吃掉<code>buckets</code>。 在<code>flat_map</code>中，回调输入的是<code>buckets</code>的每个元素，并且要求返回的是一个可转变成迭代器的对象， <code>flat_map</code>会将所有结果链接（<code>chain</code>）起来。</p><p>这是一个将二维数组扁平化的过程，如果是用<code>map</code>的话，还需要重新<code>collect</code>成一个二维数组再<code>concat</code>。</p><h2 id="排序更大的数" tabindex="-1"><a class="header-anchor" href="#排序更大的数"><span>排序更大的数</span></a></h2><p>我们可以通过映射的方式排序更大范围的数，只要像前面几个算法那样，能建立一个单射即可。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">bucket_sort</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">F</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mapper<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span>
    <span class="token keyword">where</span> <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr_length <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 建桶</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buckets<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>arr_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buckets<span class="token punctuation">.</span><span class="token function">resize_with</span><span class="token punctuation">(</span>arr_length<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 进桶</span>
    <span class="token keyword">for</span> e <span class="token keyword">in</span> arr <span class="token punctuation">{</span>
        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">mapper</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> key <span class="token operator">&gt;=</span> <span class="token number">0.0</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&lt;</span> <span class="token number">1.0</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> bucket_id <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token punctuation">(</span>arr_length <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approx_as</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            buckets<span class="token punctuation">[</span>bucket_id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 排序每个桶，并连接</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> buckets
        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">flat_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> bucket<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token class-name">InsertionSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> bucket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev<span class="token number">.0</span> <span class="token operator">&lt;=</span> next<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bucket
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>item<span class="token closure-punctuation punctuation">|</span></span> item<span class="token number">.1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">issort<span class="token punctuation">::</span></span><span class="token class-name">InsertionSorter</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">algorithms_prelude<span class="token punctuation">::</span></span><span class="token class-name">CompareSorter</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0.79</span><span class="token punctuation">,</span> <span class="token number">0.13</span><span class="token punctuation">,</span> <span class="token number">0.16</span><span class="token punctuation">,</span> <span class="token number">0.64</span><span class="token punctuation">,</span> <span class="token number">0.39</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.89</span><span class="token punctuation">,</span> <span class="token number">0.53</span><span class="token punctuation">,</span> <span class="token number">0.71</span><span class="token punctuation">,</span> <span class="token number">0.42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> expected <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertionSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev <span class="token operator">&lt;=</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>e <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>
                result<span class="token punctuation">,</span>
                <span class="token macro property">vec!</span><span class="token punctuation">[</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending_box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>
                result<span class="token punctuation">,</span>
                <span class="token macro property">vec!</span><span class="token punctuation">[</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了保证元素依然是平均分布的，元素本身得是均匀分布的，而且mapper<strong>只能是一个线性函数</strong>，让元素计算得的键仍保持均匀分布。</p>`,6),F=n("p",null,[s("插入排序已经使用了二分查找法，所以这个算法的排序最坏情形是可以提高到"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"lg"),n("mo",null,"⁡"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(n\\lg{n})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mop"},[s("l"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")]),n("span",{class:"mclose"},")")])])]),s("的。 但是用Vec实现的桶，毕竟是一个序列表，在内存中是紧密排列的。 当需要插入一个数据时，如果超过了容量（capacity），就会另外申请空间并拷贝过去。 而且在进行插入排序时，插入的位置越靠前，则序列需要向后整体位移的数据块就越大，这种位移是非常消耗算力的。")],-1),S=n("p",null,"所以要在此基础上优化，桶就应该用链式存储实现，下一节要实现的就是是一个链表，链表是一个只能用顺序查找插入的，所以在速度上，未必比Vec快。 而且桶排序本身适合的理想情形就是输入数据均匀分布，对于均匀分布的输入，每个桶的大小会是相当平均。 每个桶平均只有一个元素，所以插入和排序操作并不会消耗太多算力。链表化优化更多是针对最坏情形的，而越接近最坏情形，链表在排序上还是比二分查找慢。",-1),L={href:"https://rust-unofficial.github.io/too-many-lists/index.html",target:"_blank",rel:"noopener noreferrer"};function T(V,z){const l=e("Tabs"),u=e("ExternalLinkIcon");return r(),k("div",null,[d,v,b,h,y,g,w,f,o(l,{id:"38",data:[{id:"lib.rs"},{id:"Cargo.toml"}]},{title0:a(({value:t,isActive:p})=>[s("lib.rs")]),title1:a(({value:t,isActive:p})=>[s("Cargo.toml")]),tab0:a(({value:t,isActive:p})=>[_]),tab1:a(({value:t,isActive:p})=>[x]),_:1},8,["data"]),q,M,O,F,S,n("p",null,[s("所以下一节只是展示一下如何在Rust实现链表，实现链表推荐"),n("a",L,[s("这个网站"),o(u)]),s("。")])])}const R=i(m,[["render",T],["__file","2024-4-22-bucket-sort-1.html.vue"]]),C=JSON.parse('{"path":"/posts/2024-4-22-bucket-sort-1.html","title":"Rust与算法基础（13）：桶排序（上）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（13）：桶排序（上）","date":"2024-04-22T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"大家好啊，今天我们就来完成《算法导论（第三版）》第八章的最后一节——桶排序。 当我们需要对一串大小为[0,1)的序列进行排序，我们可以用桶排序算法。 这一串数在这个区间中分布越平均，算法的时间复杂度就越接近O(n)，而最坏情形的时间复杂度为$\\\\Omicron(n^2)。 在输入的数据规模为n时，算法将[0,1)区间平均划分为n份，建立n个桶。 输入的数...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-4-22-bucket-sort-1.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（13）：桶排序（上）"}],["meta",{"property":"og:description","content":"大家好啊，今天我们就来完成《算法导论（第三版）》第八章的最后一节——桶排序。 当我们需要对一串大小为[0,1)的序列进行排序，我们可以用桶排序算法。 这一串数在这个区间中分布越平均，算法的时间复杂度就越接近O(n)，而最坏情形的时间复杂度为$\\\\Omicron(n^2)。 在输入的数据规模为n时，算法将[0,1)区间平均划分为n份，建立n个桶。 输入的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-01T14:28:12.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-04-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-01T14:28:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（13）：桶排序（上）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-01T14:28:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Vec桶","slug":"vec桶","link":"#vec桶","children":[]},{"level":2,"title":"排序更大的数","slug":"排序更大的数","link":"#排序更大的数","children":[]}],"git":{"createdTime":1713797249000,"updatedTime":1714573692000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":2}]},"readingTime":{"minutes":5.56,"words":1668},"filePathRelative":"posts/2024-4-22-bucket-sort-1.md","localizedDate":"2024年4月22日","excerpt":"<p>大家好啊，今天我们就来完成《算法导论（第三版）》第八章的最后一节——桶排序。</p>\\n<p>当我们需要对一串大小为<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mo stretchy=\\"false\\">[</mo><mn>0</mn><mo separator=\\"true\\">,</mo><mn>1</mn><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">[0,1)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mopen\\">[</span><span class=\\"mord\\">0</span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord\\">1</span><span class=\\"mclose\\">)</span></span></span></span>的序列进行排序，我们可以用桶排序算法。\\n这一串数在这个区间中分布越平均，算法的时间复杂度就越接近<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi mathvariant=\\"normal\\">O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">\\\\Omicron(n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathrm\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span>，而最坏情形的时间复杂度为$\\\\Omicron(n^2)。</p>","autoDesc":true}');export{R as comp,C as data};
