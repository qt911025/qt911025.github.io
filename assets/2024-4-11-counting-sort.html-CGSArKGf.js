import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-vGhL8v2_.js";const u={},i=n("h2",{id:"当输入数据的种类是可以确定的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#当输入数据的种类是可以确定的"},[n("span",null,"当输入数据的种类是可以确定的")])],-1),k=n("p",null,"快速排序中提到了一些最坏情形，当元素不够乱序，或者是重合元素过多时，快速排序越慢。",-1),r=n("p",null,[s("到目前为止，我们实现的算法都是一次性准备好的输入数据，求一个输出。 这意味着输入的数据总是有限的，与之相对应的，也有“无限”的输入，比如"),n("strong",null,"流"),s("，这里就不展开了。")],-1),d=n("p",null,"输入的数据是有限的，就意味着输入的每个元素的种类是有限的。如果每个元素不是各不相同，那就必然有重复的数据。",-1),m=n("p",null,[s("对于规模为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("的数组，有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"k")]),n("annotation",{encoding:"application/x-tex"},"k")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),s("种数据，存在"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"k"),n("mo",null,"≤"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"k \\le n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8304em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("，简单的抽屉原理。")],-1),v=l(`<p>那么当k是一个常数时，就适用于今天要说的排序算法————计数排序。</p><p>计数排序要求输入的元素是正整数（自然数也行），并且有最大值，这意味着元素的种类是有限的。 之所以有这种要求是因为这个算法希望元素可以直接作为下标。</p><p>算法将统计每种元素的出现次数，按顺序重新“铺设”在新的的数组中，也就是说这个算法的实现已经不是<strong>原址</strong>的了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">counting_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> max_key<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> max_key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token operator">&amp;</span>e <span class="token keyword">in</span> <span class="token operator">&amp;</span>vec <span class="token punctuation">{</span>
        <span class="token keyword">if</span> e <span class="token operator">&lt;</span> max_key <span class="token punctuation">{</span>
            count<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 统计同key量</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>count<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> result_len <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>result_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该定义好容量，而不是new，new出来的vec容量为0</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>result_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span>result_len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>count<span class="token punctuation">[</span>vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 注意下标</span>
        count<span class="token punctuation">[</span>vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">issort<span class="token punctuation">::</span></span><span class="token class-name">InsertionSorter</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">algorithms_prelude<span class="token punctuation">::</span></span><span class="token class-name">CompareSorter</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> expected <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertionSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev <span class="token operator">&lt;=</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>因为要求的数据有严格的限制，所以输出加了错误处理。Rust没有try/catch捕捉机制，因为Rust要求所有开发者都遵循底层对调用者负责的原则。而且还有这样的说法：如果你写的代码可以预见会出错，你为什么要让它出错呢？所以出错只会发生在上游出错了，或者是理论上就是会有不属于我这层应该处理的情况。在Java里会有Error和Exception的区别，而在Rust里，理应关掉程序的就是panic，需要交给调用者处理的则应该像函数的返回值一样处理，于是便有了Result。</p><p>当然对于panic，rust也有捕捉机制————<code>std::panic::catch_unwind()</code>，这还是将panic处理为Result来管理，这里暂时还用不到。</p><h2 id="可数" tabindex="-1"><a class="header-anchor" href="#可数"><span>可数</span></a></h2><p>我们当然不希望这个排序只有这点用，元素居然限定为usize，前面的比较排序哪怕是优化前的，都支持浮点型呢。</p><p>术业有专攻，不同的算法肯定是各有利弊，不然早就被淘汰了。 虽然不能要求计数排序也能实现比较排序相同的功能，但是因为需要让元素值能够作为计数数组的下标，才要求元素得是usize， <strong>那是否可以建立一个映射，让每种元素都对应一个usize数？</strong></p><p>这其实就是<strong>可枚举</strong>，对应数学里的概念，元素是<strong>可数的</strong>且<strong>有限的</strong>。 只要元素是可枚举的，就能建立一个从<code>element</code>到<code>key</code>的<strong>单射</strong>，从而可以排序更多类型、更大范围的数据。</p><h2 id="键的枚举" tabindex="-1"><a class="header-anchor" href="#键的枚举"><span>键的枚举</span></a></h2><p>比较排序有一个<code>compare</code>回调，对应计数排序也有一个枚举回调，像这样：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span><span class="token punctuation">(</span>elem<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个最简单的单射就是它本身：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">it_self</span><span class="token punctuation">(</span>elem<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>elem
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么计数排序可以这么实现：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">counting_sort</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    max_key<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    enumerate<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>elem<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> max_key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> e_ref <span class="token keyword">in</span> <span class="token operator">&amp;</span>vec <span class="token punctuation">{</span>
        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>e_ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> key <span class="token operator">&lt;</span> max_key <span class="token punctuation">{</span>
            count<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 统计同key量</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>count<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> result_len <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>result_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该定义好容量，而不是new，new出来的vec容量为0</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>result_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> e <span class="token keyword">in</span> vec<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> result<span class="token punctuation">[</span>count<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意下标</span>
        <span class="token punctuation">}</span>
        count<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">issort<span class="token punctuation">::</span></span><span class="token class-name">InsertionSorter</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token namespace">algorithms_prelude<span class="token punctuation">::</span></span><span class="token class-name">CompareSorter</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> expected <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertionSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev <span class="token operator">&lt;=</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;元素值溢出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们增加结构体、Box，和幂等性测试。这个算法是幂等性（《算法导论》里是“稳定性”，两者概念不一样，但等价）的， 这很重要，因为后面的<strong>基数排序</strong>需要这个性质。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>
                result<span class="token punctuation">,</span>
                <span class="token macro property">vec!</span><span class="token punctuation">[</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending_box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>
                result<span class="token punctuation">,</span>
                <span class="token macro property">vec!</span><span class="token punctuation">[</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                        id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                        name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败，不应该返回错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending_idempotence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 幂等性测试</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq, Clone)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS2&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> enumerate <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Foo</span><span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> expected <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertionSorter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> next<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> enumerate<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> enumerate<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result2<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="带异常处理的函数" tabindex="-1"><a class="header-anchor" href="#带异常处理的函数"><span>带异常处理的函数</span></a></h2><p>注意最后一个用例，它要求返回值是这样的格式：<code>Result&lt;(), &amp;&#39;static str&gt;</code>。</p><p>这是因为在函数内部我们用到了<code>?</code>。表示的是返回的是Result或者Option时， 返回Ok或Some则赋值，否则中断并返回Err或None。</p><p>这段</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> enumerate<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>近似等价于</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> enumerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前者和后者的区别是用<code>match</code>匹配Err时，仍然需要把Err包裹的内容析取再重新包装， 而<code>?</code>调用是直接抛出。</p><p><code>?</code>调用还需要注意的是只能用于类型上与调用者相同的函数， 也就是说<code>it_struct_sort_ascending_idempotence</code>是返回<code>Result</code>类型的， 调用的<code>counting_sort</code>也得是<code>Result</code>类型的，且两个<code>Result</code>的<code>Err</code>包裹的类型要匹配（这里都是<code>&amp;&#39;static str</code>）。</p><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p><code>it_struct_sort_ascending_idempotence</code>的返回值的<code>Ok</code>部分包裹的是一个<code>()</code>， 对应的是一般函数的没写返回值的函数，比如前面几个用例。</p><p>没返回值的函数，对应C/C++的void函数，这在rust里并不是真的没返回值，这只是一个语法糖。 一个没写返回值的函数，比如</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都是有返回值的。</p><p>还有一种函数是<strong>不返回</strong>的函数————Diverging Function，它声明了这个函数在任何条件分支下都不会返回某个值， 即使这个函数会结束也是如此。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">!</span> <span class="token punctuation">{</span>
    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;This call never returns.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不返回的函数内部往往有无限循环、panic、结束进程等过程。 一个函数内部有返回和不返回的分支，那么这个函数是什么样的函数，就要看返回值类型声明的是什么。</p><p>diverging也就是数学里的divergent，即“发散的”，相对的概念“收敛的”，叫做convergent。 发散的不光有函数，函数的调用作为表达式，也是整个“发散的”表达式的子集。</p><p>比如<code>continue</code>也是一个发散表达式。</p><p>发散的表达式的作用就是声明这个表达式会中止一个过程，编译器静态分析会<strong>识别出这种中止，不再要求这个分支有返回值</strong>。</p>`,42),b={href:"https://doc.rust-lang.org/rust-by-example/fn/diverging.html",target:"_blank",rel:"noopener noreferrer"};function g(y,w){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,k,r,d,m,v,n("p",null,[s("具体案例可以看"),n("a",b,[s("这篇文章"),c(a)]),s("。")])])}const _=t(u,[["render",g],["__file","2024-4-11-counting-sort.html.vue"]]),x=JSON.parse('{"path":"/posts/2024-4-11-counting-sort.html","title":"Rust与算法基础（11）：计数排序","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（11）：计数排序","date":"2024-04-11T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"当输入数据的种类是可以确定的 快速排序中提到了一些最坏情形，当元素不够乱序，或者是重合元素过多时，快速排序越慢。 到目前为止，我们实现的算法都是一次性准备好的输入数据，求一个输出。 这意味着输入的数据总是有限的，与之相对应的，也有“无限”的输入，比如流，这里就不展开了。 输入的数据是有限的，就意味着输入的每个元素的种类是有限的。如果每个元素不是各不相同...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-4-11-counting-sort.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（11）：计数排序"}],["meta",{"property":"og:description","content":"当输入数据的种类是可以确定的 快速排序中提到了一些最坏情形，当元素不够乱序，或者是重合元素过多时，快速排序越慢。 到目前为止，我们实现的算法都是一次性准备好的输入数据，求一个输出。 这意味着输入的数据总是有限的，与之相对应的，也有“无限”的输入，比如流，这里就不展开了。 输入的数据是有限的，就意味着输入的每个元素的种类是有限的。如果每个元素不是各不相同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T04:24:02.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T04:24:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（11）：计数排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T04:24:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"当输入数据的种类是可以确定的","slug":"当输入数据的种类是可以确定的","link":"#当输入数据的种类是可以确定的","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"可数","slug":"可数","link":"#可数","children":[]},{"level":2,"title":"键的枚举","slug":"键的枚举","link":"#键的枚举","children":[]},{"level":2,"title":"带异常处理的函数","slug":"带异常处理的函数","link":"#带异常处理的函数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]}],"git":{"createdTime":1713068642000,"updatedTime":1713068642000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":1}]},"readingTime":{"minutes":7.41,"words":2222},"filePathRelative":"posts/2024-4-11-counting-sort.md","localizedDate":"2024年4月11日","excerpt":"<h2>当输入数据的种类是可以确定的</h2>\\n<p>快速排序中提到了一些最坏情形，当元素不够乱序，或者是重合元素过多时，快速排序越慢。</p>\\n<p>到目前为止，我们实现的算法都是一次性准备好的输入数据，求一个输出。\\n这意味着输入的数据总是有限的，与之相对应的，也有“无限”的输入，比如<strong>流</strong>，这里就不展开了。</p>\\n<p>输入的数据是有限的，就意味着输入的每个元素的种类是有限的。如果每个元素不是各不相同，那就必然有重复的数据。</p>\\n<p>对于规模为<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\\"application/x-tex\\">n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.4306em;\\"></span><span class=\\"mord mathnormal\\">n</span></span></span></span>的数组，有<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\"application/x-tex\\">k</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6944em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.03148em;\\">k</span></span></span></span>种数据，存在<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\\"application/x-tex\\">k \\\\le n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8304em;vertical-align:-0.136em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.03148em;\\">k</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">≤</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.4306em;\\"></span><span class=\\"mord mathnormal\\">n</span></span></span></span>，简单的抽屉原理。</p>","autoDesc":true}');export{_ as comp,x as data};
