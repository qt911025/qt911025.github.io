import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as u,d as c,w as a,e as l,a as n,b as s}from"./app-t_mOUPFz.js";const k={},d=l(`<p>考虑到接下来的整个算法学习路线，未来的新算法会存在共同点，已实现的算法也常常要用到， 我要把整个学习路线放在一个workspace里，统一管理，方便引用。</p><p>文件结构就像这样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/-
 |-/_2_1_issort
 |-/algorithms_prelude
 |-Cargo.lock
 |-Cargo.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_2_1_issort文件夹命名方式是以_开头，《算法导论》的章节号命名，有时候会自定义。 开头下划线主要是习惯，新创建的包名默认是文件夹名，包名不能是数字开头，所以才加的下划线。 但我后来又把包名自己改了一次，改成比较通用的名称，文件夹名是什么格式就不太重要了，主要还是为了排序。</p><p>根目录的Cargo.toml即工作空间配置，内容包括了这个工作空间里有的包：</p>`,5),m=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml","data-title":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"workspace"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"resolver"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"2"'),s(`

`),n("span",{class:"token key property"},"members"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},'"algorithms_prelude"'),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},'"_2_1_issort"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("p",null,"以[workspace]打头，没有了package块。",-1),v=n("p",null,"resolver设定了整个工作空间用的是那个版本的依赖处理，只有1版和2版，这里用2。",-1),_=n("p",null,[s("members里写的"),n("strong",null,"是文件夹名而不是包名"),s("，包括了要囊括进工作空间的所有包。")],-1),y=n("p",null,"_2_1_issort就是之前实现的插入排序，algorithms_prelude是整个算法学习要用到的基本元件，都是自己写的。",-1),g=n("p",null,"现在我们要做的是：",-1),h=n("h2",{id:"抽象出排序这个接口-将插入排序改成对它的实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#抽象出排序这个接口-将插入排序改成对它的实现"},[n("span",null,"抽象出排序这个接口，将插入排序改成对它的实现")])],-1),f=n("p",null,"algorithms_prelude是一个库，里面只有一个lib.rs",-1),w=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs","data-title":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// 定义一个Sorter Trait"),s(`
`),n("span",{class:"token comment"},"// 建议实现Sorter Trait的是一个Wrapper"),s(`
`),n("span",{class:"token comment"},"// sort_by一个断言函数，定义的是前一个与后一个元素满足断言函数的关系。"),s(`
`),n("span",{class:"token comment"},"// | 比如传入一个大于关系的函数gt()，排序后，前一个应比后一个大"),s(`
`),n("span",{class:"token comment"},"// | 那么gt的定义为"),s(`
`),n("span",{class:"token comment"},"// | fn gt(prev:i32, next:i32) {"),s(`
`),n("span",{class:"token comment"},"// |     prev > next"),s(`
`),n("span",{class:"token comment"},"// | }"),s(`
`),n("span",{class:"token comment"},"// 使得这个排序的结果为降序"),s(`
`),n("span",{class:"token comment"},"// Sorter获取原序列的可变引用，以sort_by改变原序列"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"trait"),s(),n("span",{class:"token type-definition class-name"},"Sorter"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"tests"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"InsertionSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Copy"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Sorter"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},";"),s(`
    
        `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" len "),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
            `),n("span",{class:"token keyword"},"if"),s(" len "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
    
            `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),s("vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"let"),s(" e "),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" j "),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"while"),s(" j "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    vec`),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    j `),n("span",{class:"token operator"},"="),s(" j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
                vec`),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" e"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_sort_ascending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=l(`<p>测试里提供了一个简单的插入排序实现，为了方便就限定了Copy trait。 很容易就知道_2_1_issort如何改成实现这个接口了，这里就不多说了。</p><p>就解释一下这接口吧，<code>struct XX(YY)</code>是一种很常见的实现，结构体的结构仅用了一个元组包含了唯一的目标。 这是很典型的<strong>装饰器模式</strong>，装饰器包裹目标，装饰器实现接口，而不影响目标。 显然，装饰器和目标是一个生命周期，而且装饰器包裹的是目标的可变引用而非目标本身， 可见装饰器和目标并不是整体-部分关系，所以需要显示指明两者的生命周期关系。</p><p>Sorter trait指定了一个类型绑定，类型绑定的特点就是实现谁就绑定谁，不允许重复实现（而泛型可以代入不同的实类型实现多次）。</p><h2 id="运行与测试" tabindex="-1"><a class="header-anchor" href="#运行与测试"><span>运行与测试</span></a></h2><p>在一个IDE里，比如VSCode，一般是以工作空间所在目录为工作路径的。 在命令行输入一些运行或者测试工作空间中一些项目，并不需要进入那个目录再执行<code>cargo run</code>、<code>cargo test</code>。</p><p>可以在工作空间目录下，在输入的命令后面加入<code>-p</code>选项（即<code>--package</code>），参数为<strong>包名（而非文件夹名）</strong>。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cargo test -p issort
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7);function S(T,C){const o=i("Tabs");return r(),u("div",null,[d,c(o,{id:"13",data:[{id:"Cargo.toml"}]},{title0:a(({value:t,isActive:e})=>[s("Cargo.toml")]),tab0:a(({value:t,isActive:e})=>[m]),_:1},8,["data"]),b,v,_,y,g,h,f,c(o,{id:"39",data:[{id:"algorithms_prelude/src/lib.rs"}]},{title0:a(({value:t,isActive:e})=>[s("algorithms_prelude/src/lib.rs")]),tab0:a(({value:t,isActive:e})=>[w]),_:1},8,["data"]),x])}const q=p(k,[["render",S],["__file","2024-2-8-workspace-refactoring.html.vue"]]),R=JSON.parse('{"path":"/posts/2024-2-8-workspace-refactoring.html","title":"Rust与算法基础（4）：重构工作空间","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（4）：重构工作空间","date":"2024-02-08T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"考虑到接下来的整个算法学习路线，未来的新算法会存在共同点，已实现的算法也常常要用到， 我要把整个学习路线放在一个workspace里，统一管理，方便引用。 文件结构就像这样： _2_1_issort文件夹命名方式是以_开头，《算法导论》的章节号命名，有时候会自定义。 开头下划线主要是习惯，新创建的包名默认是文件夹名，包名不能是数字开头，所以才加的下划线...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-2-8-workspace-refactoring.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（4）：重构工作空间"}],["meta",{"property":"og:description","content":"考虑到接下来的整个算法学习路线，未来的新算法会存在共同点，已实现的算法也常常要用到， 我要把整个学习路线放在一个workspace里，统一管理，方便引用。 文件结构就像这样： _2_1_issort文件夹命名方式是以_开头，《算法导论》的章节号命名，有时候会自定义。 开头下划线主要是习惯，新创建的包名默认是文件夹名，包名不能是数字开头，所以才加的下划线..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T14:14:56.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T14:14:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（4）：重构工作空间\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-04T14:14:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[{"level":2,"title":"抽象出排序这个接口，将插入排序改成对它的实现","slug":"抽象出排序这个接口-将插入排序改成对它的实现","link":"#抽象出排序这个接口-将插入排序改成对它的实现","children":[]},{"level":2,"title":"运行与测试","slug":"运行与测试","link":"#运行与测试","children":[]}],"git":{"createdTime":1707402526000,"updatedTime":1709561696000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":2}]},"readingTime":{"minutes":3.38,"words":1015},"filePathRelative":"posts/2024-2-8-workspace-refactoring.md","localizedDate":"2024年2月8日","excerpt":"<p>考虑到接下来的整个算法学习路线，未来的新算法会存在共同点，已实现的算法也常常要用到，\\n我要把整个学习路线放在一个workspace里，统一管理，方便引用。</p>\\n<p>文件结构就像这样：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>/-\\n |-/_2_1_issort\\n |-/algorithms_prelude\\n |-Cargo.lock\\n |-Cargo.toml\\n</code></pre></div><p>_2_1_issort文件夹命名方式是以_开头，《算法导论》的章节号命名，有时候会自定义。\\n开头下划线主要是习惯，新创建的包名默认是文件夹名，包名不能是数字开头，所以才加的下划线。\\n但我后来又把包名自己改了一次，改成比较通用的名称，文件夹名是什么格式就不太重要了，主要还是为了排序。</p>","autoDesc":true}');export{q as comp,R as data};
