import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c as u,d as c,w as a,e as r,a as n,b as s}from"./app-hH7fqeXa.js";const k={},m=r(`<p>考虑到接下来的整个算法学习路线，未来的新算法会存在共同点，已实现的算法也常常要用到， 我要把整个学习路线放在一个workspace里，统一管理，方便引用。</p><p>文件结构就像这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/-
 |-/_2_1_issort
 |-/algorithms_prelude
 |-Cargo.lock
 |-Cargo.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_2_1_issort文件夹命名方式是以_开头，《算法导论》的章节号命名，有时候会自定义。 开头下划线主要是习惯，新创建的包名默认是文件夹名，包名不能是数字开头，所以才加的下划线。 但我后来又把包名自己改了一次，改成比较通用的名称，文件夹名是什么格式就不太重要了，主要还是为了排序。</p><p>根目录的Cargo.toml即工作空间配置，内容包括了这个工作空间里有的包：</p>`,5),d=n("div",{class:"language-toml line-numbers-mode","data-ext":"toml"},[n("pre",{class:"language-toml"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token table class-name"},"workspace"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token key property"},"resolver"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token string"},'"2"'),s(`

`),n("span",{class:"token key property"},"members"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},'"algorithms_prelude"'),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},'"_2_1_issort"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("p",null,"以[workspace]打头，没有了package块。",-1),v=n("p",null,"resolver设定了整个工作空间用的是那个版本的依赖处理，只有1版和2版，这里用2。",-1),_=n("p",null,"members里写的是文件夹名而不是包名，包括了要囊括进工作空间的所有包。",-1),y=n("p",null,"_2_1_issort就是之前实现的插入排序，algorithms_prelude是整个算法学习要用到的基本元件，都是自己写的。",-1),f=n("p",null,"现在我们要做的是：",-1),w=n("h2",{id:"抽象出排序这个接口-将插入排序改成对它的实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#抽象出排序这个接口-将插入排序改成对它的实现","aria-hidden":"true"},"#"),s(" 抽象出排序这个接口，将插入排序改成对它的实现")],-1),g=n("p",null,"algorithms_prelude是一个库，里面只有一个lib.rs",-1),h=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"// 定义一个Sorter Trait"),s(`
`),n("span",{class:"token comment"},"// 建议实现Sorter Trait的是一个Wrapper"),s(`
`),n("span",{class:"token comment"},"// sort_by一个断言函数，定义的是前一个与后一个元素满足断言函数的关系。"),s(`
`),n("span",{class:"token comment"},"// | 比如传入一个大于关系的函数gt()，排序后，前一个应比后一个大"),s(`
`),n("span",{class:"token comment"},"// | 那么gt的定义为"),s(`
`),n("span",{class:"token comment"},"// | fn gt(prev:i32, next:i32) {"),s(`
`),n("span",{class:"token comment"},"// |     prev > next"),s(`
`),n("span",{class:"token comment"},"// | }"),s(`
`),n("span",{class:"token comment"},"// 使得这个排序的结果为降序"),s(`
`),n("span",{class:"token comment"},"// Sorter获取原序列的可变引用，以sort_by改变原序列"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"trait"),s(),n("span",{class:"token type-definition class-name"},"Sorter"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"tests"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token type-definition class-name"},"InsertionSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token class-name"},"Seq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"impl"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Copy"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Sorter"),s(),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token type-definition class-name"},"Element"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Elem"),n("span",{class:"token punctuation"},";"),s(`
    
        `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"fn"),n("span",{class:"token punctuation"},"("),s("prev"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"Self"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"bool"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" vec "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" len "),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
            `),n("span",{class:"token keyword"},"if"),s(" len "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
    
            `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),s("vec"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"let"),s(" e "),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" j "),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"while"),s(" j "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("vec"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    vec`),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" vec"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    j `),n("span",{class:"token operator"},"="),s(" j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
                vec`),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" e"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token attribute attr-name"},"#[test]"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"it_sort_ascending"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"InsertionSorter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort_by"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("prev"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(" prev "),n("span",{class:"token operator"},"<"),s(" next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"145"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("p",null,"测试里提供了一个简单的插入排序实现，为了方便就限定了Copy trait。 很容易就知道_2_1_issort如何改成实现这个接口了，这里就不多说了。",-1),S=n("p",null,[s("就解释一下这接口吧，"),n("code",null,"struct XX(YY)"),s("是一种很常见的实现，结构体的结构仅用了一个元组包含了唯一的目标。 这是很典型的"),n("strong",null,"装饰器模式"),s("，装饰器包裹目标，装饰器实现接口，而不影响目标。 显然，装饰器和目标是一个生命周期，而且装饰器包裹的是目标的可变引用而非目标本身， 可见装饰器和目标并不是整体-部分关系，所以需要显示指明两者的生命周期关系。")],-1),E=n("p",null,"Sorter trait指定了一个类型绑定，类型绑定的特点就是实现谁就绑定谁，不允许重复实现（而泛型可以代入不同的实类型实现多次）。",-1);function C(j,T){const o=p("Tabs");return i(),u("div",null,[m,c(o,{id:"13",data:[{id:"Cargo.toml"}]},{title0:a(({value:t,isActive:e})=>[s("Cargo.toml")]),tab0:a(({value:t,isActive:e})=>[d]),_:1},8,["data"]),b,v,_,y,f,w,g,c(o,{id:"39",data:[{id:"algorithms_prelude/src/lib.rs"}]},{title0:a(({value:t,isActive:e})=>[s("algorithms_prelude/src/lib.rs")]),tab0:a(({value:t,isActive:e})=>[h]),_:1},8,["data"]),x,S,E])}const N=l(k,[["render",C],["__file","2024-2-8-workspace-refactoring.html.vue"]]);export{N as default};
