import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as t,c as e,d as s,a as o,e as c}from"./app-Dl7jSvyk.js";const l={},u=o("p",null,"上一章结尾提到，反复复制还有优化空间，可以优化成环状的。 在递推到最小单位的数组后，每次回归都是归并到更大的临时向量，最终回归到原来的向量。 而在叶子节点，需要获得原来向量对应位置的数据，所以整个算法的拷贝流程是这样的",-1),i=c(`<p>分析这些需求，可以简单定义一下接口是怎样的：</p><p>首先，排序函数依然是对原向量的修改，所以递归函数必须有<code>vec: &amp;mut Vec&lt;T&gt;</code>这个参数。</p><p>大概是这样</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token function">merge_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么对于递归调用，代入的则应该是一个新建的临时空间：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>q <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">merge_sort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>r <span class="token operator">-</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">merge_sort</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>合并，就是直接将存放结果的区域和临时向量作为参数，临时向量之后就没用了，所以可以吃掉。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token function">merge</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是到了终止条件，待排序的数组都是只有一个元素了，这个元素从哪来？因为原来的数组在第一个递归函数就弄丢了， 所以为了在叶子节点能索引到原来函数的数据，需要不断传进去，把递归函数整成这样。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token function">merge_sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> original_vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后得到这样的代码：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MergeSorter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">pub</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token class-name">Seq</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Elem</span><span class="token operator">&gt;</span> <span class="token class-name">Sorter</span> <span class="token keyword">for</span> <span class="token class-name">MergeSorter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Element</span> <span class="token operator">=</span> <span class="token class-name">Elem</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">sort_by</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Element</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建了一个指向了原数组空间的数组，但元素是ManuallyDrop包裹</span>
            <span class="token comment">// 使得递归的数组拷贝类型是对齐的，第一层递归不和后来的递归搞特殊</span>
            <span class="token keyword">let</span> p <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> len <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> cap <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> temp <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> len<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">,</span> vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 用了同一个堆空间，要避免重复释放</span>
            <span class="token function">forget</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">merge_sort</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    temp<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token comment">// 代入原数组只是用于叶子节点拷贝，不需要可变</span>
    vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    p<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    r<span class="token punctuation">:</span> <span class="token keyword">usize</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> r <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>q <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// set_len()比创建Layer方便，只不过之前没发现...</span>
            left<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>q <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> left<span class="token punctuation">,</span> vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>r <span class="token operator">-</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>r <span class="token operator">-</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> right<span class="token punctuation">,</span> vec<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> compare<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 叶子，终止</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">merge</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    temp<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    left<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    right<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ManuallyDrop</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left_length <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right_length <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> left_length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> left_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> left_length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> j <span class="token operator">&lt;</span> right_length <span class="token punctuation">{</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> right_length <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>注意temp和vec的关系是这样的，两个数组对着同一个堆空间开了数组，共用资源，这个前面的不一样：</p>`,14);function k(r,d){const n=p("Mermaid");return t(),e("div",null,[u,s(n,{id:"mermaid-3",code:"eJxLL0osyFAIceLicox+2jf/6YSJL9v7YxV0de0UnDSe7NjybPo2TS4nMN8ZzncG813gfBcw35ELAMQ8HcQ="}),i,s(n,{id:"mermaid-34",code:"eJxLL0osyFAIceJSAILi0iQIvyw1+fmslqcL2sDCIOCk4ZRfoQnmpualgGknBV1dOwXn6GdTNzzrXfd+T8fT/lXP5nS+2D/zZXvPkx29T/vXv2zvfbqk92V717Mp+97v6YwF63PU0ACar6kJ1o6wCSznoqFRkppbgCEJAE2aQx0="})])}const b=a(l,[["render",k],["__file","2024-3-13-merge-sort-3.html.vue"]]),g=JSON.parse('{"path":"/posts/2024-3-13-merge-sort-3.html","title":"Rust与算法基础（7）：归并排序（下）","lang":"zh-CN","frontmatter":{"title":"Rust与算法基础（7）：归并排序（下）","date":"2024-03-13T00:00:00.000Z","category":"编程","tag":["Rust","算法"],"description":"上一章结尾提到，反复复制还有优化空间，可以优化成环状的。 在递推到最小单位的数组后，每次回归都是归并到更大的临时向量，最终回归到原来的向量。 而在叶子节点，需要获得原来向量对应位置的数据，所以整个算法的拷贝流程是这样的 分析这些需求，可以简单定义一下接口是怎样的： 首先，排序函数依然是对原向量的修改，所以递归函数必须有vec: &mut Vec<T>这...","head":[["meta",{"property":"og:url","content":"https://qt911025.github.io/posts/2024-3-13-merge-sort-3.html"}],["meta",{"property":"og:site_name","content":"QuenTine的博客"}],["meta",{"property":"og:title","content":"Rust与算法基础（7）：归并排序（下）"}],["meta",{"property":"og:description","content":"上一章结尾提到，反复复制还有优化空间，可以优化成环状的。 在递推到最小单位的数组后，每次回归都是归并到更大的临时向量，最终回归到原来的向量。 而在叶子节点，需要获得原来向量对应位置的数据，所以整个算法的拷贝流程是这样的 分析这些需求，可以简单定义一下接口是怎样的： 首先，排序函数依然是对原向量的修改，所以递归函数必须有vec: &mut Vec<T>这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-14T13:45:59.000Z"}],["meta",{"property":"article:author","content":"QuenTine"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-14T13:45:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust与算法基础（7）：归并排序（下）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-14T13:45:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QuenTine\\",\\"url\\":\\"https://qt911025.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1710423959000,"updatedTime":1710423959000,"contributors":[{"name":"qt911025","email":"qt911025@qq.com","commits":1}]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"posts/2024-3-13-merge-sort-3.md","localizedDate":"2024年3月13日","excerpt":"<p>上一章结尾提到，反复复制还有优化空间，可以优化成环状的。\\n在递推到最小单位的数组后，每次回归都是归并到更大的临时向量，最终回归到原来的向量。\\n而在叶子节点，需要获得原来向量对应位置的数据，所以整个算法的拷贝流程是这样的</p>\\n<p>分析这些需求，可以简单定义一下接口是怎样的：</p>\\n<p>首先，排序函数依然是对原向量的修改，所以递归函数必须有<code>vec: &amp;mut Vec&lt;T&gt;</code>这个参数。</p>\\n<p>大概是这样</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token function\\">merge_sort</span><span class=\\"token punctuation\\">(</span>vec<span class=\\"token punctuation\\">,</span> compare<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> vec<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,g as data};
