import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-hH7fqeXa.js";const t={},e=p(`<p>上一集我们用unsafe实现去掉了排序函数的Copy特质限定。 这个排序函数只实现了升序排序，如果想要实现降序排序，需要另写一个函数吗？ 然而降序排序和升序排序仅仅是一个符号的区别，输入类型的差异的不同实现可以用泛型、重载等方法解决，而目的差异往往是需要另外实现。</p><h2 id="加个降序" tabindex="-1"><a class="header-anchor" href="#加个降序" aria-hidden="true">#</a> 加个降序？</h2><p>如果差异很小，我们可以再加些选项参数，并在函数内部实现里用一系列条件判定来控制，比如这样：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">sort</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token punctuation">:</span> <span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ascend<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">if</span> ascend <span class="token punctuation">{</span>
                <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>e <span class="token punctuation">{</span>
                    <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>e <span class="token punctuation">{</span>
                    <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这算不上有多优雅，调用者如果要加一些别的排序规则，就要修改排序函数本身。 不如做一个抽象，让调用者自己决定排序的规则，我只提供一个标准，也就是回调函数的标准。</p><h2 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数" aria-hidden="true">#</a> 回调函数</h2><p>回调函数可以把排序的规则扔给调用者实现，就像定义一个接口一样。</p><p>我们现在就规定回调函数符合这样的输入，输出应为什么：</p><blockquote><p>输入一个“前一个元素”<code>prev</code>，一个“后一个元素”<code>next</code>。 返回每一个<code>prev</code>和<code>next</code>的应有关系的断言，比如前者应该大于后者，则断言为<code>prev &gt; next</code>。</p></blockquote><p>修改之后，排序函数就变成了这样</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">sort</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Elem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> compare<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Elem</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Elem</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们规定了回调函数compare是这个格式的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fn(prev: &amp;Elem, next: &amp;Elem) -&gt; bool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而比较前后元素的部分变成了这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>!compare(&amp;vec[j - 1], &amp;e)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也就是说，前后排序如果不符合应有的顺序，就调换位置。排序抛给调用者自定义，就不限定元素必须实现PartialOrd了。</p><p>测试也可以想升序升序，想降序降序了：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev <span class="token operator">&lt;</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_sort_descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev <span class="token operator">&gt;</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_struct_sort_ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span>
        <span class="token keyword">struct</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>prev<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> prev<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>
            v<span class="token punctuation">,</span>
            <span class="token macro property">vec!</span><span class="token punctuation">[</span>
                <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">&quot;ZL&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                    id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">&quot;SQ&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                    id<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                    id<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
                    id<span class="token punctuation">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">&quot;WW&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三个用例里，我也把为Foo实现的PartialOrd trait去掉了，回调函数改为比较两个元素的id。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这个排序算法算是变得比较强大了，支持的元素类型没有限定特质，还加入了回调。</p><p>这次改造我们也逐渐发现，我们要实现的功能遵循一定的范式。 无论用什么算法排序，都有一些共同点：</p><ul><li>都在一个列表里</li><li>元素类型相同</li><li>前一个元素与后一个元素的比较</li></ul><p>那么对于不同的算法，都要考虑：</p><ol><li>列表是什么形式？</li><li>元素是什么类型？</li><li>怎么比较？</li></ol><p>1决定了元素的移动怎么实现；2可以用泛型解决；3依赖2，定义新结构体的时候可以预定义一些开箱即用的排序规则。 可以根据项目需要进行一定抽象，让结构更有条理一些。</p>`,26),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2024-2-8-rust-issort-without-partialord.html.vue"]]);export{r as default};
